/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2020 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


import XCTest
@testable import AsposeSlidesCloud

class SlidesAPITests : XCTestCase {
    static var allTests : [(String, (SlidesAPITests) -> () -> ())] = [
        ("testcopyFile", testcopyFile),
        ("testcopyFileInvalidsrcPath", testcopyFileInvalidsrcPath),
        ("testcopyFileInvaliddestPath", testcopyFileInvaliddestPath),
        ("testcopyFileInvalidsrcStorageName", testcopyFileInvalidsrcStorageName),
        ("testcopyFileInvaliddestStorageName", testcopyFileInvaliddestStorageName),
        ("testcopyFileInvalidversionId", testcopyFileInvalidversionId),
        ("testcopyFolder", testcopyFolder),
        ("testcopyFolderInvalidsrcPath", testcopyFolderInvalidsrcPath),
        ("testcopyFolderInvaliddestPath", testcopyFolderInvaliddestPath),
        ("testcopyFolderInvalidsrcStorageName", testcopyFolderInvalidsrcStorageName),
        ("testcopyFolderInvaliddestStorageName", testcopyFolderInvaliddestStorageName),
        ("testcreateFolder", testcreateFolder),
        ("testcreateFolderInvalidpath", testcreateFolderInvalidpath),
        ("testcreateFolderInvalidstorageName", testcreateFolderInvalidstorageName),
        ("testdeleteFile", testdeleteFile),
        ("testdeleteFileInvalidpath", testdeleteFileInvalidpath),
        ("testdeleteFileInvalidstorageName", testdeleteFileInvalidstorageName),
        ("testdeleteFileInvalidversionId", testdeleteFileInvalidversionId),
        ("testdeleteFolder", testdeleteFolder),
        ("testdeleteFolderInvalidpath", testdeleteFolderInvalidpath),
        ("testdeleteFolderInvalidstorageName", testdeleteFolderInvalidstorageName),
        ("testdeleteFolderInvalidrecursive", testdeleteFolderInvalidrecursive),
        ("testdeleteNotesSlide", testdeleteNotesSlide),
        ("testdeleteNotesSlideInvalidname", testdeleteNotesSlideInvalidname),
        ("testdeleteNotesSlideInvalidslideIndex", testdeleteNotesSlideInvalidslideIndex),
        ("testdeleteNotesSlideInvalidpassword", testdeleteNotesSlideInvalidpassword),
        ("testdeleteNotesSlideInvalidfolder", testdeleteNotesSlideInvalidfolder),
        ("testdeleteNotesSlideInvalidstorage", testdeleteNotesSlideInvalidstorage),
        ("testdeleteNotesSlideParagraph", testdeleteNotesSlideParagraph),
        ("testdeleteNotesSlideParagraphInvalidname", testdeleteNotesSlideParagraphInvalidname),
        ("testdeleteNotesSlideParagraphInvalidslideIndex", testdeleteNotesSlideParagraphInvalidslideIndex),
        ("testdeleteNotesSlideParagraphInvalidpath", testdeleteNotesSlideParagraphInvalidpath),
        ("testdeleteNotesSlideParagraphInvalidshapeIndex", testdeleteNotesSlideParagraphInvalidshapeIndex),
        ("testdeleteNotesSlideParagraphInvalidparagraphIndex", testdeleteNotesSlideParagraphInvalidparagraphIndex),
        ("testdeleteNotesSlideParagraphInvalidpassword", testdeleteNotesSlideParagraphInvalidpassword),
        ("testdeleteNotesSlideParagraphInvalidfolder", testdeleteNotesSlideParagraphInvalidfolder),
        ("testdeleteNotesSlideParagraphInvalidstorage", testdeleteNotesSlideParagraphInvalidstorage),
        ("testdeleteNotesSlideParagraphs", testdeleteNotesSlideParagraphs),
        ("testdeleteNotesSlideParagraphsInvalidname", testdeleteNotesSlideParagraphsInvalidname),
        ("testdeleteNotesSlideParagraphsInvalidslideIndex", testdeleteNotesSlideParagraphsInvalidslideIndex),
        ("testdeleteNotesSlideParagraphsInvalidpath", testdeleteNotesSlideParagraphsInvalidpath),
        ("testdeleteNotesSlideParagraphsInvalidshapeIndex", testdeleteNotesSlideParagraphsInvalidshapeIndex),
        ("testdeleteNotesSlideParagraphsInvalidparagraphs", testdeleteNotesSlideParagraphsInvalidparagraphs),
        ("testdeleteNotesSlideParagraphsInvalidpassword", testdeleteNotesSlideParagraphsInvalidpassword),
        ("testdeleteNotesSlideParagraphsInvalidfolder", testdeleteNotesSlideParagraphsInvalidfolder),
        ("testdeleteNotesSlideParagraphsInvalidstorage", testdeleteNotesSlideParagraphsInvalidstorage),
        ("testdeleteNotesSlidePortion", testdeleteNotesSlidePortion),
        ("testdeleteNotesSlidePortionInvalidname", testdeleteNotesSlidePortionInvalidname),
        ("testdeleteNotesSlidePortionInvalidslideIndex", testdeleteNotesSlidePortionInvalidslideIndex),
        ("testdeleteNotesSlidePortionInvalidpath", testdeleteNotesSlidePortionInvalidpath),
        ("testdeleteNotesSlidePortionInvalidshapeIndex", testdeleteNotesSlidePortionInvalidshapeIndex),
        ("testdeleteNotesSlidePortionInvalidparagraphIndex", testdeleteNotesSlidePortionInvalidparagraphIndex),
        ("testdeleteNotesSlidePortionInvalidportionIndex", testdeleteNotesSlidePortionInvalidportionIndex),
        ("testdeleteNotesSlidePortionInvalidpassword", testdeleteNotesSlidePortionInvalidpassword),
        ("testdeleteNotesSlidePortionInvalidfolder", testdeleteNotesSlidePortionInvalidfolder),
        ("testdeleteNotesSlidePortionInvalidstorage", testdeleteNotesSlidePortionInvalidstorage),
        ("testdeleteNotesSlidePortions", testdeleteNotesSlidePortions),
        ("testdeleteNotesSlidePortionsInvalidname", testdeleteNotesSlidePortionsInvalidname),
        ("testdeleteNotesSlidePortionsInvalidslideIndex", testdeleteNotesSlidePortionsInvalidslideIndex),
        ("testdeleteNotesSlidePortionsInvalidpath", testdeleteNotesSlidePortionsInvalidpath),
        ("testdeleteNotesSlidePortionsInvalidshapeIndex", testdeleteNotesSlidePortionsInvalidshapeIndex),
        ("testdeleteNotesSlidePortionsInvalidparagraphIndex", testdeleteNotesSlidePortionsInvalidparagraphIndex),
        ("testdeleteNotesSlidePortionsInvalidportions", testdeleteNotesSlidePortionsInvalidportions),
        ("testdeleteNotesSlidePortionsInvalidpassword", testdeleteNotesSlidePortionsInvalidpassword),
        ("testdeleteNotesSlidePortionsInvalidfolder", testdeleteNotesSlidePortionsInvalidfolder),
        ("testdeleteNotesSlidePortionsInvalidstorage", testdeleteNotesSlidePortionsInvalidstorage),
        ("testdeleteNotesSlideShape", testdeleteNotesSlideShape),
        ("testdeleteNotesSlideShapeInvalidname", testdeleteNotesSlideShapeInvalidname),
        ("testdeleteNotesSlideShapeInvalidslideIndex", testdeleteNotesSlideShapeInvalidslideIndex),
        ("testdeleteNotesSlideShapeInvalidpath", testdeleteNotesSlideShapeInvalidpath),
        ("testdeleteNotesSlideShapeInvalidshapeIndex", testdeleteNotesSlideShapeInvalidshapeIndex),
        ("testdeleteNotesSlideShapeInvalidpassword", testdeleteNotesSlideShapeInvalidpassword),
        ("testdeleteNotesSlideShapeInvalidfolder", testdeleteNotesSlideShapeInvalidfolder),
        ("testdeleteNotesSlideShapeInvalidstorage", testdeleteNotesSlideShapeInvalidstorage),
        ("testdeleteNotesSlideShapes", testdeleteNotesSlideShapes),
        ("testdeleteNotesSlideShapesInvalidname", testdeleteNotesSlideShapesInvalidname),
        ("testdeleteNotesSlideShapesInvalidslideIndex", testdeleteNotesSlideShapesInvalidslideIndex),
        ("testdeleteNotesSlideShapesInvalidpath", testdeleteNotesSlideShapesInvalidpath),
        ("testdeleteNotesSlideShapesInvalidshapes", testdeleteNotesSlideShapesInvalidshapes),
        ("testdeleteNotesSlideShapesInvalidpassword", testdeleteNotesSlideShapesInvalidpassword),
        ("testdeleteNotesSlideShapesInvalidfolder", testdeleteNotesSlideShapesInvalidfolder),
        ("testdeleteNotesSlideShapesInvalidstorage", testdeleteNotesSlideShapesInvalidstorage),
        ("testdeleteParagraph", testdeleteParagraph),
        ("testdeleteParagraphInvalidname", testdeleteParagraphInvalidname),
        ("testdeleteParagraphInvalidslideIndex", testdeleteParagraphInvalidslideIndex),
        ("testdeleteParagraphInvalidpath", testdeleteParagraphInvalidpath),
        ("testdeleteParagraphInvalidshapeIndex", testdeleteParagraphInvalidshapeIndex),
        ("testdeleteParagraphInvalidparagraphIndex", testdeleteParagraphInvalidparagraphIndex),
        ("testdeleteParagraphInvalidpassword", testdeleteParagraphInvalidpassword),
        ("testdeleteParagraphInvalidfolder", testdeleteParagraphInvalidfolder),
        ("testdeleteParagraphInvalidstorage", testdeleteParagraphInvalidstorage),
        ("testdeleteParagraphs", testdeleteParagraphs),
        ("testdeleteParagraphsInvalidname", testdeleteParagraphsInvalidname),
        ("testdeleteParagraphsInvalidslideIndex", testdeleteParagraphsInvalidslideIndex),
        ("testdeleteParagraphsInvalidpath", testdeleteParagraphsInvalidpath),
        ("testdeleteParagraphsInvalidshapeIndex", testdeleteParagraphsInvalidshapeIndex),
        ("testdeleteParagraphsInvalidparagraphs", testdeleteParagraphsInvalidparagraphs),
        ("testdeleteParagraphsInvalidpassword", testdeleteParagraphsInvalidpassword),
        ("testdeleteParagraphsInvalidfolder", testdeleteParagraphsInvalidfolder),
        ("testdeleteParagraphsInvalidstorage", testdeleteParagraphsInvalidstorage),
        ("testdeletePortion", testdeletePortion),
        ("testdeletePortionInvalidname", testdeletePortionInvalidname),
        ("testdeletePortionInvalidslideIndex", testdeletePortionInvalidslideIndex),
        ("testdeletePortionInvalidpath", testdeletePortionInvalidpath),
        ("testdeletePortionInvalidshapeIndex", testdeletePortionInvalidshapeIndex),
        ("testdeletePortionInvalidparagraphIndex", testdeletePortionInvalidparagraphIndex),
        ("testdeletePortionInvalidportionIndex", testdeletePortionInvalidportionIndex),
        ("testdeletePortionInvalidpassword", testdeletePortionInvalidpassword),
        ("testdeletePortionInvalidfolder", testdeletePortionInvalidfolder),
        ("testdeletePortionInvalidstorage", testdeletePortionInvalidstorage),
        ("testdeletePortions", testdeletePortions),
        ("testdeletePortionsInvalidname", testdeletePortionsInvalidname),
        ("testdeletePortionsInvalidslideIndex", testdeletePortionsInvalidslideIndex),
        ("testdeletePortionsInvalidpath", testdeletePortionsInvalidpath),
        ("testdeletePortionsInvalidshapeIndex", testdeletePortionsInvalidshapeIndex),
        ("testdeletePortionsInvalidparagraphIndex", testdeletePortionsInvalidparagraphIndex),
        ("testdeletePortionsInvalidportions", testdeletePortionsInvalidportions),
        ("testdeletePortionsInvalidpassword", testdeletePortionsInvalidpassword),
        ("testdeletePortionsInvalidfolder", testdeletePortionsInvalidfolder),
        ("testdeletePortionsInvalidstorage", testdeletePortionsInvalidstorage),
        ("testdeleteSlideAnimation", testdeleteSlideAnimation),
        ("testdeleteSlideAnimationInvalidname", testdeleteSlideAnimationInvalidname),
        ("testdeleteSlideAnimationInvalidslideIndex", testdeleteSlideAnimationInvalidslideIndex),
        ("testdeleteSlideAnimationInvalidpassword", testdeleteSlideAnimationInvalidpassword),
        ("testdeleteSlideAnimationInvalidfolder", testdeleteSlideAnimationInvalidfolder),
        ("testdeleteSlideAnimationInvalidstorage", testdeleteSlideAnimationInvalidstorage),
        ("testdeleteSlideAnimationEffect", testdeleteSlideAnimationEffect),
        ("testdeleteSlideAnimationEffectInvalidname", testdeleteSlideAnimationEffectInvalidname),
        ("testdeleteSlideAnimationEffectInvalidslideIndex", testdeleteSlideAnimationEffectInvalidslideIndex),
        ("testdeleteSlideAnimationEffectInvalideffectIndex", testdeleteSlideAnimationEffectInvalideffectIndex),
        ("testdeleteSlideAnimationEffectInvalidpassword", testdeleteSlideAnimationEffectInvalidpassword),
        ("testdeleteSlideAnimationEffectInvalidfolder", testdeleteSlideAnimationEffectInvalidfolder),
        ("testdeleteSlideAnimationEffectInvalidstorage", testdeleteSlideAnimationEffectInvalidstorage),
        ("testdeleteSlideAnimationInteractiveSequence", testdeleteSlideAnimationInteractiveSequence),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidname", testdeleteSlideAnimationInteractiveSequenceInvalidname),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidslideIndex", testdeleteSlideAnimationInteractiveSequenceInvalidslideIndex),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidsequenceIndex", testdeleteSlideAnimationInteractiveSequenceInvalidsequenceIndex),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidpassword", testdeleteSlideAnimationInteractiveSequenceInvalidpassword),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidfolder", testdeleteSlideAnimationInteractiveSequenceInvalidfolder),
        ("testdeleteSlideAnimationInteractiveSequenceInvalidstorage", testdeleteSlideAnimationInteractiveSequenceInvalidstorage),
        ("testdeleteSlideAnimationInteractiveSequenceEffect", testdeleteSlideAnimationInteractiveSequenceEffect),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidname", testdeleteSlideAnimationInteractiveSequenceEffectInvalidname),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidslideIndex", testdeleteSlideAnimationInteractiveSequenceEffectInvalidslideIndex),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex", testdeleteSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalideffectIndex", testdeleteSlideAnimationInteractiveSequenceEffectInvalideffectIndex),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidpassword", testdeleteSlideAnimationInteractiveSequenceEffectInvalidpassword),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidfolder", testdeleteSlideAnimationInteractiveSequenceEffectInvalidfolder),
        ("testdeleteSlideAnimationInteractiveSequenceEffectInvalidstorage", testdeleteSlideAnimationInteractiveSequenceEffectInvalidstorage),
        ("testdeleteSlideAnimationInteractiveSequences", testdeleteSlideAnimationInteractiveSequences),
        ("testdeleteSlideAnimationInteractiveSequencesInvalidname", testdeleteSlideAnimationInteractiveSequencesInvalidname),
        ("testdeleteSlideAnimationInteractiveSequencesInvalidslideIndex", testdeleteSlideAnimationInteractiveSequencesInvalidslideIndex),
        ("testdeleteSlideAnimationInteractiveSequencesInvalidpassword", testdeleteSlideAnimationInteractiveSequencesInvalidpassword),
        ("testdeleteSlideAnimationInteractiveSequencesInvalidfolder", testdeleteSlideAnimationInteractiveSequencesInvalidfolder),
        ("testdeleteSlideAnimationInteractiveSequencesInvalidstorage", testdeleteSlideAnimationInteractiveSequencesInvalidstorage),
        ("testdeleteSlideAnimationMainSequence", testdeleteSlideAnimationMainSequence),
        ("testdeleteSlideAnimationMainSequenceInvalidname", testdeleteSlideAnimationMainSequenceInvalidname),
        ("testdeleteSlideAnimationMainSequenceInvalidslideIndex", testdeleteSlideAnimationMainSequenceInvalidslideIndex),
        ("testdeleteSlideAnimationMainSequenceInvalidpassword", testdeleteSlideAnimationMainSequenceInvalidpassword),
        ("testdeleteSlideAnimationMainSequenceInvalidfolder", testdeleteSlideAnimationMainSequenceInvalidfolder),
        ("testdeleteSlideAnimationMainSequenceInvalidstorage", testdeleteSlideAnimationMainSequenceInvalidstorage),
        ("testdeleteSlideByIndex", testdeleteSlideByIndex),
        ("testdeleteSlideByIndexInvalidname", testdeleteSlideByIndexInvalidname),
        ("testdeleteSlideByIndexInvalidslideIndex", testdeleteSlideByIndexInvalidslideIndex),
        ("testdeleteSlideByIndexInvalidpassword", testdeleteSlideByIndexInvalidpassword),
        ("testdeleteSlideByIndexInvalidfolder", testdeleteSlideByIndexInvalidfolder),
        ("testdeleteSlideByIndexInvalidstorage", testdeleteSlideByIndexInvalidstorage),
        ("testdeleteSlideShape", testdeleteSlideShape),
        ("testdeleteSlideShapeInvalidname", testdeleteSlideShapeInvalidname),
        ("testdeleteSlideShapeInvalidslideIndex", testdeleteSlideShapeInvalidslideIndex),
        ("testdeleteSlideShapeInvalidpath", testdeleteSlideShapeInvalidpath),
        ("testdeleteSlideShapeInvalidshapeIndex", testdeleteSlideShapeInvalidshapeIndex),
        ("testdeleteSlideShapeInvalidpassword", testdeleteSlideShapeInvalidpassword),
        ("testdeleteSlideShapeInvalidfolder", testdeleteSlideShapeInvalidfolder),
        ("testdeleteSlideShapeInvalidstorage", testdeleteSlideShapeInvalidstorage),
        ("testdeleteSlideShapes", testdeleteSlideShapes),
        ("testdeleteSlideShapesInvalidname", testdeleteSlideShapesInvalidname),
        ("testdeleteSlideShapesInvalidslideIndex", testdeleteSlideShapesInvalidslideIndex),
        ("testdeleteSlideShapesInvalidpath", testdeleteSlideShapesInvalidpath),
        ("testdeleteSlideShapesInvalidshapes", testdeleteSlideShapesInvalidshapes),
        ("testdeleteSlideShapesInvalidpassword", testdeleteSlideShapesInvalidpassword),
        ("testdeleteSlideShapesInvalidfolder", testdeleteSlideShapesInvalidfolder),
        ("testdeleteSlideShapesInvalidstorage", testdeleteSlideShapesInvalidstorage),
        ("testdeleteSlidesCleanSlidesList", testdeleteSlidesCleanSlidesList),
        ("testdeleteSlidesCleanSlidesListInvalidname", testdeleteSlidesCleanSlidesListInvalidname),
        ("testdeleteSlidesCleanSlidesListInvalidslides", testdeleteSlidesCleanSlidesListInvalidslides),
        ("testdeleteSlidesCleanSlidesListInvalidpassword", testdeleteSlidesCleanSlidesListInvalidpassword),
        ("testdeleteSlidesCleanSlidesListInvalidfolder", testdeleteSlidesCleanSlidesListInvalidfolder),
        ("testdeleteSlidesCleanSlidesListInvalidstorage", testdeleteSlidesCleanSlidesListInvalidstorage),
        ("testdeleteSlidesDocumentProperties", testdeleteSlidesDocumentProperties),
        ("testdeleteSlidesDocumentPropertiesInvalidname", testdeleteSlidesDocumentPropertiesInvalidname),
        ("testdeleteSlidesDocumentPropertiesInvalidpassword", testdeleteSlidesDocumentPropertiesInvalidpassword),
        ("testdeleteSlidesDocumentPropertiesInvalidfolder", testdeleteSlidesDocumentPropertiesInvalidfolder),
        ("testdeleteSlidesDocumentPropertiesInvalidstorage", testdeleteSlidesDocumentPropertiesInvalidstorage),
        ("testdeleteSlidesDocumentProperty", testdeleteSlidesDocumentProperty),
        ("testdeleteSlidesDocumentPropertyInvalidname", testdeleteSlidesDocumentPropertyInvalidname),
        ("testdeleteSlidesDocumentPropertyInvalidpropertyName", testdeleteSlidesDocumentPropertyInvalidpropertyName),
        ("testdeleteSlidesDocumentPropertyInvalidpassword", testdeleteSlidesDocumentPropertyInvalidpassword),
        ("testdeleteSlidesDocumentPropertyInvalidfolder", testdeleteSlidesDocumentPropertyInvalidfolder),
        ("testdeleteSlidesDocumentPropertyInvalidstorage", testdeleteSlidesDocumentPropertyInvalidstorage),
        ("testdeleteSlidesSlideBackground", testdeleteSlidesSlideBackground),
        ("testdeleteSlidesSlideBackgroundInvalidname", testdeleteSlidesSlideBackgroundInvalidname),
        ("testdeleteSlidesSlideBackgroundInvalidslideIndex", testdeleteSlidesSlideBackgroundInvalidslideIndex),
        ("testdeleteSlidesSlideBackgroundInvalidpassword", testdeleteSlidesSlideBackgroundInvalidpassword),
        ("testdeleteSlidesSlideBackgroundInvalidfolder", testdeleteSlidesSlideBackgroundInvalidfolder),
        ("testdeleteSlidesSlideBackgroundInvalidstorage", testdeleteSlidesSlideBackgroundInvalidstorage),
        ("testdownloadFile", testdownloadFile),
        ("testdownloadFileInvalidpath", testdownloadFileInvalidpath),
        ("testdownloadFileInvalidstorageName", testdownloadFileInvalidstorageName),
        ("testdownloadFileInvalidversionId", testdownloadFileInvalidversionId),
        ("testgetDiscUsage", testgetDiscUsage),
        ("testgetDiscUsageInvalidstorageName", testgetDiscUsageInvalidstorageName),
        ("testgetFileVersions", testgetFileVersions),
        ("testgetFileVersionsInvalidpath", testgetFileVersionsInvalidpath),
        ("testgetFileVersionsInvalidstorageName", testgetFileVersionsInvalidstorageName),
        ("testgetFilesList", testgetFilesList),
        ("testgetFilesListInvalidpath", testgetFilesListInvalidpath),
        ("testgetFilesListInvalidstorageName", testgetFilesListInvalidstorageName),
        ("testgetLayoutSlide", testgetLayoutSlide),
        ("testgetLayoutSlideInvalidname", testgetLayoutSlideInvalidname),
        ("testgetLayoutSlideInvalidslideIndex", testgetLayoutSlideInvalidslideIndex),
        ("testgetLayoutSlideInvalidpassword", testgetLayoutSlideInvalidpassword),
        ("testgetLayoutSlideInvalidfolder", testgetLayoutSlideInvalidfolder),
        ("testgetLayoutSlideInvalidstorage", testgetLayoutSlideInvalidstorage),
        ("testgetLayoutSlidesList", testgetLayoutSlidesList),
        ("testgetLayoutSlidesListInvalidname", testgetLayoutSlidesListInvalidname),
        ("testgetLayoutSlidesListInvalidpassword", testgetLayoutSlidesListInvalidpassword),
        ("testgetLayoutSlidesListInvalidfolder", testgetLayoutSlidesListInvalidfolder),
        ("testgetLayoutSlidesListInvalidstorage", testgetLayoutSlidesListInvalidstorage),
        ("testgetMasterSlide", testgetMasterSlide),
        ("testgetMasterSlideInvalidname", testgetMasterSlideInvalidname),
        ("testgetMasterSlideInvalidslideIndex", testgetMasterSlideInvalidslideIndex),
        ("testgetMasterSlideInvalidpassword", testgetMasterSlideInvalidpassword),
        ("testgetMasterSlideInvalidfolder", testgetMasterSlideInvalidfolder),
        ("testgetMasterSlideInvalidstorage", testgetMasterSlideInvalidstorage),
        ("testgetMasterSlidesList", testgetMasterSlidesList),
        ("testgetMasterSlidesListInvalidname", testgetMasterSlidesListInvalidname),
        ("testgetMasterSlidesListInvalidpassword", testgetMasterSlidesListInvalidpassword),
        ("testgetMasterSlidesListInvalidfolder", testgetMasterSlidesListInvalidfolder),
        ("testgetMasterSlidesListInvalidstorage", testgetMasterSlidesListInvalidstorage),
        ("testgetNotesSlide", testgetNotesSlide),
        ("testgetNotesSlideInvalidname", testgetNotesSlideInvalidname),
        ("testgetNotesSlideInvalidslideIndex", testgetNotesSlideInvalidslideIndex),
        ("testgetNotesSlideInvalidpassword", testgetNotesSlideInvalidpassword),
        ("testgetNotesSlideInvalidfolder", testgetNotesSlideInvalidfolder),
        ("testgetNotesSlideInvalidstorage", testgetNotesSlideInvalidstorage),
        ("testgetNotesSlideShape", testgetNotesSlideShape),
        ("testgetNotesSlideShapeInvalidname", testgetNotesSlideShapeInvalidname),
        ("testgetNotesSlideShapeInvalidslideIndex", testgetNotesSlideShapeInvalidslideIndex),
        ("testgetNotesSlideShapeInvalidpath", testgetNotesSlideShapeInvalidpath),
        ("testgetNotesSlideShapeInvalidshapeIndex", testgetNotesSlideShapeInvalidshapeIndex),
        ("testgetNotesSlideShapeInvalidpassword", testgetNotesSlideShapeInvalidpassword),
        ("testgetNotesSlideShapeInvalidfolder", testgetNotesSlideShapeInvalidfolder),
        ("testgetNotesSlideShapeInvalidstorage", testgetNotesSlideShapeInvalidstorage),
        ("testgetNotesSlideShapeParagraph", testgetNotesSlideShapeParagraph),
        ("testgetNotesSlideShapeParagraphInvalidname", testgetNotesSlideShapeParagraphInvalidname),
        ("testgetNotesSlideShapeParagraphInvalidslideIndex", testgetNotesSlideShapeParagraphInvalidslideIndex),
        ("testgetNotesSlideShapeParagraphInvalidpath", testgetNotesSlideShapeParagraphInvalidpath),
        ("testgetNotesSlideShapeParagraphInvalidshapeIndex", testgetNotesSlideShapeParagraphInvalidshapeIndex),
        ("testgetNotesSlideShapeParagraphInvalidparagraphIndex", testgetNotesSlideShapeParagraphInvalidparagraphIndex),
        ("testgetNotesSlideShapeParagraphInvalidpassword", testgetNotesSlideShapeParagraphInvalidpassword),
        ("testgetNotesSlideShapeParagraphInvalidfolder", testgetNotesSlideShapeParagraphInvalidfolder),
        ("testgetNotesSlideShapeParagraphInvalidstorage", testgetNotesSlideShapeParagraphInvalidstorage),
        ("testgetNotesSlideShapeParagraphs", testgetNotesSlideShapeParagraphs),
        ("testgetNotesSlideShapeParagraphsInvalidname", testgetNotesSlideShapeParagraphsInvalidname),
        ("testgetNotesSlideShapeParagraphsInvalidslideIndex", testgetNotesSlideShapeParagraphsInvalidslideIndex),
        ("testgetNotesSlideShapeParagraphsInvalidpath", testgetNotesSlideShapeParagraphsInvalidpath),
        ("testgetNotesSlideShapeParagraphsInvalidshapeIndex", testgetNotesSlideShapeParagraphsInvalidshapeIndex),
        ("testgetNotesSlideShapeParagraphsInvalidpassword", testgetNotesSlideShapeParagraphsInvalidpassword),
        ("testgetNotesSlideShapeParagraphsInvalidfolder", testgetNotesSlideShapeParagraphsInvalidfolder),
        ("testgetNotesSlideShapeParagraphsInvalidstorage", testgetNotesSlideShapeParagraphsInvalidstorage),
        ("testgetNotesSlideShapePortion", testgetNotesSlideShapePortion),
        ("testgetNotesSlideShapePortionInvalidname", testgetNotesSlideShapePortionInvalidname),
        ("testgetNotesSlideShapePortionInvalidslideIndex", testgetNotesSlideShapePortionInvalidslideIndex),
        ("testgetNotesSlideShapePortionInvalidpath", testgetNotesSlideShapePortionInvalidpath),
        ("testgetNotesSlideShapePortionInvalidshapeIndex", testgetNotesSlideShapePortionInvalidshapeIndex),
        ("testgetNotesSlideShapePortionInvalidparagraphIndex", testgetNotesSlideShapePortionInvalidparagraphIndex),
        ("testgetNotesSlideShapePortionInvalidportionIndex", testgetNotesSlideShapePortionInvalidportionIndex),
        ("testgetNotesSlideShapePortionInvalidpassword", testgetNotesSlideShapePortionInvalidpassword),
        ("testgetNotesSlideShapePortionInvalidfolder", testgetNotesSlideShapePortionInvalidfolder),
        ("testgetNotesSlideShapePortionInvalidstorage", testgetNotesSlideShapePortionInvalidstorage),
        ("testgetNotesSlideShapePortions", testgetNotesSlideShapePortions),
        ("testgetNotesSlideShapePortionsInvalidname", testgetNotesSlideShapePortionsInvalidname),
        ("testgetNotesSlideShapePortionsInvalidslideIndex", testgetNotesSlideShapePortionsInvalidslideIndex),
        ("testgetNotesSlideShapePortionsInvalidpath", testgetNotesSlideShapePortionsInvalidpath),
        ("testgetNotesSlideShapePortionsInvalidshapeIndex", testgetNotesSlideShapePortionsInvalidshapeIndex),
        ("testgetNotesSlideShapePortionsInvalidparagraphIndex", testgetNotesSlideShapePortionsInvalidparagraphIndex),
        ("testgetNotesSlideShapePortionsInvalidpassword", testgetNotesSlideShapePortionsInvalidpassword),
        ("testgetNotesSlideShapePortionsInvalidfolder", testgetNotesSlideShapePortionsInvalidfolder),
        ("testgetNotesSlideShapePortionsInvalidstorage", testgetNotesSlideShapePortionsInvalidstorage),
        ("testgetNotesSlideShapes", testgetNotesSlideShapes),
        ("testgetNotesSlideShapesInvalidname", testgetNotesSlideShapesInvalidname),
        ("testgetNotesSlideShapesInvalidslideIndex", testgetNotesSlideShapesInvalidslideIndex),
        ("testgetNotesSlideShapesInvalidpath", testgetNotesSlideShapesInvalidpath),
        ("testgetNotesSlideShapesInvalidpassword", testgetNotesSlideShapesInvalidpassword),
        ("testgetNotesSlideShapesInvalidfolder", testgetNotesSlideShapesInvalidfolder),
        ("testgetNotesSlideShapesInvalidstorage", testgetNotesSlideShapesInvalidstorage),
        ("testgetNotesSlideWithFormat", testgetNotesSlideWithFormat),
        ("testgetNotesSlideWithFormatInvalidname", testgetNotesSlideWithFormatInvalidname),
        ("testgetNotesSlideWithFormatInvalidslideIndex", testgetNotesSlideWithFormatInvalidslideIndex),
        ("testgetNotesSlideWithFormatInvalidformat", testgetNotesSlideWithFormatInvalidformat),
        ("testgetNotesSlideWithFormatInvalidwidth", testgetNotesSlideWithFormatInvalidwidth),
        ("testgetNotesSlideWithFormatInvalidheight", testgetNotesSlideWithFormatInvalidheight),
        ("testgetNotesSlideWithFormatInvalidpassword", testgetNotesSlideWithFormatInvalidpassword),
        ("testgetNotesSlideWithFormatInvalidfolder", testgetNotesSlideWithFormatInvalidfolder),
        ("testgetNotesSlideWithFormatInvalidstorage", testgetNotesSlideWithFormatInvalidstorage),
        ("testgetNotesSlideWithFormatInvalidfontsFolder", testgetNotesSlideWithFormatInvalidfontsFolder),
        ("testgetParagraphPortion", testgetParagraphPortion),
        ("testgetParagraphPortionInvalidname", testgetParagraphPortionInvalidname),
        ("testgetParagraphPortionInvalidslideIndex", testgetParagraphPortionInvalidslideIndex),
        ("testgetParagraphPortionInvalidpath", testgetParagraphPortionInvalidpath),
        ("testgetParagraphPortionInvalidshapeIndex", testgetParagraphPortionInvalidshapeIndex),
        ("testgetParagraphPortionInvalidparagraphIndex", testgetParagraphPortionInvalidparagraphIndex),
        ("testgetParagraphPortionInvalidportionIndex", testgetParagraphPortionInvalidportionIndex),
        ("testgetParagraphPortionInvalidpassword", testgetParagraphPortionInvalidpassword),
        ("testgetParagraphPortionInvalidfolder", testgetParagraphPortionInvalidfolder),
        ("testgetParagraphPortionInvalidstorage", testgetParagraphPortionInvalidstorage),
        ("testgetParagraphPortions", testgetParagraphPortions),
        ("testgetParagraphPortionsInvalidname", testgetParagraphPortionsInvalidname),
        ("testgetParagraphPortionsInvalidslideIndex", testgetParagraphPortionsInvalidslideIndex),
        ("testgetParagraphPortionsInvalidpath", testgetParagraphPortionsInvalidpath),
        ("testgetParagraphPortionsInvalidshapeIndex", testgetParagraphPortionsInvalidshapeIndex),
        ("testgetParagraphPortionsInvalidparagraphIndex", testgetParagraphPortionsInvalidparagraphIndex),
        ("testgetParagraphPortionsInvalidpassword", testgetParagraphPortionsInvalidpassword),
        ("testgetParagraphPortionsInvalidfolder", testgetParagraphPortionsInvalidfolder),
        ("testgetParagraphPortionsInvalidstorage", testgetParagraphPortionsInvalidstorage),
        ("testgetSlideAnimation", testgetSlideAnimation),
        ("testgetSlideAnimationInvalidname", testgetSlideAnimationInvalidname),
        ("testgetSlideAnimationInvalidslideIndex", testgetSlideAnimationInvalidslideIndex),
        ("testgetSlideAnimationInvalidshapeIndex", testgetSlideAnimationInvalidshapeIndex),
        ("testgetSlideAnimationInvalidpassword", testgetSlideAnimationInvalidpassword),
        ("testgetSlideAnimationInvalidfolder", testgetSlideAnimationInvalidfolder),
        ("testgetSlideAnimationInvalidstorage", testgetSlideAnimationInvalidstorage),
        ("testgetSlideShape", testgetSlideShape),
        ("testgetSlideShapeInvalidname", testgetSlideShapeInvalidname),
        ("testgetSlideShapeInvalidslideIndex", testgetSlideShapeInvalidslideIndex),
        ("testgetSlideShapeInvalidpath", testgetSlideShapeInvalidpath),
        ("testgetSlideShapeInvalidshapeIndex", testgetSlideShapeInvalidshapeIndex),
        ("testgetSlideShapeInvalidpassword", testgetSlideShapeInvalidpassword),
        ("testgetSlideShapeInvalidfolder", testgetSlideShapeInvalidfolder),
        ("testgetSlideShapeInvalidstorage", testgetSlideShapeInvalidstorage),
        ("testgetSlideShapeParagraph", testgetSlideShapeParagraph),
        ("testgetSlideShapeParagraphInvalidname", testgetSlideShapeParagraphInvalidname),
        ("testgetSlideShapeParagraphInvalidslideIndex", testgetSlideShapeParagraphInvalidslideIndex),
        ("testgetSlideShapeParagraphInvalidpath", testgetSlideShapeParagraphInvalidpath),
        ("testgetSlideShapeParagraphInvalidshapeIndex", testgetSlideShapeParagraphInvalidshapeIndex),
        ("testgetSlideShapeParagraphInvalidparagraphIndex", testgetSlideShapeParagraphInvalidparagraphIndex),
        ("testgetSlideShapeParagraphInvalidpassword", testgetSlideShapeParagraphInvalidpassword),
        ("testgetSlideShapeParagraphInvalidfolder", testgetSlideShapeParagraphInvalidfolder),
        ("testgetSlideShapeParagraphInvalidstorage", testgetSlideShapeParagraphInvalidstorage),
        ("testgetSlideShapeParagraphs", testgetSlideShapeParagraphs),
        ("testgetSlideShapeParagraphsInvalidname", testgetSlideShapeParagraphsInvalidname),
        ("testgetSlideShapeParagraphsInvalidslideIndex", testgetSlideShapeParagraphsInvalidslideIndex),
        ("testgetSlideShapeParagraphsInvalidpath", testgetSlideShapeParagraphsInvalidpath),
        ("testgetSlideShapeParagraphsInvalidshapeIndex", testgetSlideShapeParagraphsInvalidshapeIndex),
        ("testgetSlideShapeParagraphsInvalidpassword", testgetSlideShapeParagraphsInvalidpassword),
        ("testgetSlideShapeParagraphsInvalidfolder", testgetSlideShapeParagraphsInvalidfolder),
        ("testgetSlideShapeParagraphsInvalidstorage", testgetSlideShapeParagraphsInvalidstorage),
        ("testgetSlideShapes", testgetSlideShapes),
        ("testgetSlideShapesInvalidname", testgetSlideShapesInvalidname),
        ("testgetSlideShapesInvalidslideIndex", testgetSlideShapesInvalidslideIndex),
        ("testgetSlideShapesInvalidpath", testgetSlideShapesInvalidpath),
        ("testgetSlideShapesInvalidpassword", testgetSlideShapesInvalidpassword),
        ("testgetSlideShapesInvalidfolder", testgetSlideShapesInvalidfolder),
        ("testgetSlideShapesInvalidstorage", testgetSlideShapesInvalidstorage),
        ("testgetSlidesApiInfo", testgetSlidesApiInfo),
        ("testgetSlidesDocument", testgetSlidesDocument),
        ("testgetSlidesDocumentInvalidname", testgetSlidesDocumentInvalidname),
        ("testgetSlidesDocumentInvalidpassword", testgetSlidesDocumentInvalidpassword),
        ("testgetSlidesDocumentInvalidstorage", testgetSlidesDocumentInvalidstorage),
        ("testgetSlidesDocumentInvalidfolder", testgetSlidesDocumentInvalidfolder),
        ("testgetSlidesDocumentProperties", testgetSlidesDocumentProperties),
        ("testgetSlidesDocumentPropertiesInvalidname", testgetSlidesDocumentPropertiesInvalidname),
        ("testgetSlidesDocumentPropertiesInvalidpassword", testgetSlidesDocumentPropertiesInvalidpassword),
        ("testgetSlidesDocumentPropertiesInvalidfolder", testgetSlidesDocumentPropertiesInvalidfolder),
        ("testgetSlidesDocumentPropertiesInvalidstorage", testgetSlidesDocumentPropertiesInvalidstorage),
        ("testgetSlidesDocumentProperty", testgetSlidesDocumentProperty),
        ("testgetSlidesDocumentPropertyInvalidname", testgetSlidesDocumentPropertyInvalidname),
        ("testgetSlidesDocumentPropertyInvalidpropertyName", testgetSlidesDocumentPropertyInvalidpropertyName),
        ("testgetSlidesDocumentPropertyInvalidpassword", testgetSlidesDocumentPropertyInvalidpassword),
        ("testgetSlidesDocumentPropertyInvalidfolder", testgetSlidesDocumentPropertyInvalidfolder),
        ("testgetSlidesDocumentPropertyInvalidstorage", testgetSlidesDocumentPropertyInvalidstorage),
        ("testgetSlidesImageWithDefaultFormat", testgetSlidesImageWithDefaultFormat),
        ("testgetSlidesImageWithDefaultFormatInvalidname", testgetSlidesImageWithDefaultFormatInvalidname),
        ("testgetSlidesImageWithDefaultFormatInvalidindex", testgetSlidesImageWithDefaultFormatInvalidindex),
        ("testgetSlidesImageWithDefaultFormatInvalidpassword", testgetSlidesImageWithDefaultFormatInvalidpassword),
        ("testgetSlidesImageWithDefaultFormatInvalidfolder", testgetSlidesImageWithDefaultFormatInvalidfolder),
        ("testgetSlidesImageWithDefaultFormatInvalidstorage", testgetSlidesImageWithDefaultFormatInvalidstorage),
        ("testgetSlidesImageWithFormat", testgetSlidesImageWithFormat),
        ("testgetSlidesImageWithFormatInvalidname", testgetSlidesImageWithFormatInvalidname),
        ("testgetSlidesImageWithFormatInvalidindex", testgetSlidesImageWithFormatInvalidindex),
        ("testgetSlidesImageWithFormatInvalidformat", testgetSlidesImageWithFormatInvalidformat),
        ("testgetSlidesImageWithFormatInvalidpassword", testgetSlidesImageWithFormatInvalidpassword),
        ("testgetSlidesImageWithFormatInvalidfolder", testgetSlidesImageWithFormatInvalidfolder),
        ("testgetSlidesImageWithFormatInvalidstorage", testgetSlidesImageWithFormatInvalidstorage),
        ("testgetSlidesImages", testgetSlidesImages),
        ("testgetSlidesImagesInvalidname", testgetSlidesImagesInvalidname),
        ("testgetSlidesImagesInvalidpassword", testgetSlidesImagesInvalidpassword),
        ("testgetSlidesImagesInvalidfolder", testgetSlidesImagesInvalidfolder),
        ("testgetSlidesImagesInvalidstorage", testgetSlidesImagesInvalidstorage),
        ("testgetSlidesPlaceholder", testgetSlidesPlaceholder),
        ("testgetSlidesPlaceholderInvalidname", testgetSlidesPlaceholderInvalidname),
        ("testgetSlidesPlaceholderInvalidslideIndex", testgetSlidesPlaceholderInvalidslideIndex),
        ("testgetSlidesPlaceholderInvalidplaceholderIndex", testgetSlidesPlaceholderInvalidplaceholderIndex),
        ("testgetSlidesPlaceholderInvalidpassword", testgetSlidesPlaceholderInvalidpassword),
        ("testgetSlidesPlaceholderInvalidfolder", testgetSlidesPlaceholderInvalidfolder),
        ("testgetSlidesPlaceholderInvalidstorage", testgetSlidesPlaceholderInvalidstorage),
        ("testgetSlidesPlaceholders", testgetSlidesPlaceholders),
        ("testgetSlidesPlaceholdersInvalidname", testgetSlidesPlaceholdersInvalidname),
        ("testgetSlidesPlaceholdersInvalidslideIndex", testgetSlidesPlaceholdersInvalidslideIndex),
        ("testgetSlidesPlaceholdersInvalidpassword", testgetSlidesPlaceholdersInvalidpassword),
        ("testgetSlidesPlaceholdersInvalidfolder", testgetSlidesPlaceholdersInvalidfolder),
        ("testgetSlidesPlaceholdersInvalidstorage", testgetSlidesPlaceholdersInvalidstorage),
        ("testgetSlidesPresentationTextItems", testgetSlidesPresentationTextItems),
        ("testgetSlidesPresentationTextItemsInvalidname", testgetSlidesPresentationTextItemsInvalidname),
        ("testgetSlidesPresentationTextItemsInvalidwithEmpty", testgetSlidesPresentationTextItemsInvalidwithEmpty),
        ("testgetSlidesPresentationTextItemsInvalidpassword", testgetSlidesPresentationTextItemsInvalidpassword),
        ("testgetSlidesPresentationTextItemsInvalidfolder", testgetSlidesPresentationTextItemsInvalidfolder),
        ("testgetSlidesPresentationTextItemsInvalidstorage", testgetSlidesPresentationTextItemsInvalidstorage),
        ("testgetSlidesSlide", testgetSlidesSlide),
        ("testgetSlidesSlideInvalidname", testgetSlidesSlideInvalidname),
        ("testgetSlidesSlideInvalidslideIndex", testgetSlidesSlideInvalidslideIndex),
        ("testgetSlidesSlideInvalidpassword", testgetSlidesSlideInvalidpassword),
        ("testgetSlidesSlideInvalidfolder", testgetSlidesSlideInvalidfolder),
        ("testgetSlidesSlideInvalidstorage", testgetSlidesSlideInvalidstorage),
        ("testgetSlidesSlideBackground", testgetSlidesSlideBackground),
        ("testgetSlidesSlideBackgroundInvalidname", testgetSlidesSlideBackgroundInvalidname),
        ("testgetSlidesSlideBackgroundInvalidslideIndex", testgetSlidesSlideBackgroundInvalidslideIndex),
        ("testgetSlidesSlideBackgroundInvalidpassword", testgetSlidesSlideBackgroundInvalidpassword),
        ("testgetSlidesSlideBackgroundInvalidfolder", testgetSlidesSlideBackgroundInvalidfolder),
        ("testgetSlidesSlideBackgroundInvalidstorage", testgetSlidesSlideBackgroundInvalidstorage),
        ("testgetSlidesSlideComments", testgetSlidesSlideComments),
        ("testgetSlidesSlideCommentsInvalidname", testgetSlidesSlideCommentsInvalidname),
        ("testgetSlidesSlideCommentsInvalidslideIndex", testgetSlidesSlideCommentsInvalidslideIndex),
        ("testgetSlidesSlideCommentsInvalidpassword", testgetSlidesSlideCommentsInvalidpassword),
        ("testgetSlidesSlideCommentsInvalidfolder", testgetSlidesSlideCommentsInvalidfolder),
        ("testgetSlidesSlideCommentsInvalidstorage", testgetSlidesSlideCommentsInvalidstorage),
        ("testgetSlidesSlideImages", testgetSlidesSlideImages),
        ("testgetSlidesSlideImagesInvalidname", testgetSlidesSlideImagesInvalidname),
        ("testgetSlidesSlideImagesInvalidslideIndex", testgetSlidesSlideImagesInvalidslideIndex),
        ("testgetSlidesSlideImagesInvalidpassword", testgetSlidesSlideImagesInvalidpassword),
        ("testgetSlidesSlideImagesInvalidfolder", testgetSlidesSlideImagesInvalidfolder),
        ("testgetSlidesSlideImagesInvalidstorage", testgetSlidesSlideImagesInvalidstorage),
        ("testgetSlidesSlideTextItems", testgetSlidesSlideTextItems),
        ("testgetSlidesSlideTextItemsInvalidname", testgetSlidesSlideTextItemsInvalidname),
        ("testgetSlidesSlideTextItemsInvalidslideIndex", testgetSlidesSlideTextItemsInvalidslideIndex),
        ("testgetSlidesSlideTextItemsInvalidwithEmpty", testgetSlidesSlideTextItemsInvalidwithEmpty),
        ("testgetSlidesSlideTextItemsInvalidpassword", testgetSlidesSlideTextItemsInvalidpassword),
        ("testgetSlidesSlideTextItemsInvalidfolder", testgetSlidesSlideTextItemsInvalidfolder),
        ("testgetSlidesSlideTextItemsInvalidstorage", testgetSlidesSlideTextItemsInvalidstorage),
        ("testgetSlidesSlidesList", testgetSlidesSlidesList),
        ("testgetSlidesSlidesListInvalidname", testgetSlidesSlidesListInvalidname),
        ("testgetSlidesSlidesListInvalidpassword", testgetSlidesSlidesListInvalidpassword),
        ("testgetSlidesSlidesListInvalidfolder", testgetSlidesSlidesListInvalidfolder),
        ("testgetSlidesSlidesListInvalidstorage", testgetSlidesSlidesListInvalidstorage),
        ("testgetSlidesTheme", testgetSlidesTheme),
        ("testgetSlidesThemeInvalidname", testgetSlidesThemeInvalidname),
        ("testgetSlidesThemeInvalidslideIndex", testgetSlidesThemeInvalidslideIndex),
        ("testgetSlidesThemeInvalidpassword", testgetSlidesThemeInvalidpassword),
        ("testgetSlidesThemeInvalidfolder", testgetSlidesThemeInvalidfolder),
        ("testgetSlidesThemeInvalidstorage", testgetSlidesThemeInvalidstorage),
        ("testgetSlidesThemeColorScheme", testgetSlidesThemeColorScheme),
        ("testgetSlidesThemeColorSchemeInvalidname", testgetSlidesThemeColorSchemeInvalidname),
        ("testgetSlidesThemeColorSchemeInvalidslideIndex", testgetSlidesThemeColorSchemeInvalidslideIndex),
        ("testgetSlidesThemeColorSchemeInvalidpassword", testgetSlidesThemeColorSchemeInvalidpassword),
        ("testgetSlidesThemeColorSchemeInvalidfolder", testgetSlidesThemeColorSchemeInvalidfolder),
        ("testgetSlidesThemeColorSchemeInvalidstorage", testgetSlidesThemeColorSchemeInvalidstorage),
        ("testgetSlidesThemeFontScheme", testgetSlidesThemeFontScheme),
        ("testgetSlidesThemeFontSchemeInvalidname", testgetSlidesThemeFontSchemeInvalidname),
        ("testgetSlidesThemeFontSchemeInvalidslideIndex", testgetSlidesThemeFontSchemeInvalidslideIndex),
        ("testgetSlidesThemeFontSchemeInvalidpassword", testgetSlidesThemeFontSchemeInvalidpassword),
        ("testgetSlidesThemeFontSchemeInvalidfolder", testgetSlidesThemeFontSchemeInvalidfolder),
        ("testgetSlidesThemeFontSchemeInvalidstorage", testgetSlidesThemeFontSchemeInvalidstorage),
        ("testgetSlidesThemeFormatScheme", testgetSlidesThemeFormatScheme),
        ("testgetSlidesThemeFormatSchemeInvalidname", testgetSlidesThemeFormatSchemeInvalidname),
        ("testgetSlidesThemeFormatSchemeInvalidslideIndex", testgetSlidesThemeFormatSchemeInvalidslideIndex),
        ("testgetSlidesThemeFormatSchemeInvalidpassword", testgetSlidesThemeFormatSchemeInvalidpassword),
        ("testgetSlidesThemeFormatSchemeInvalidfolder", testgetSlidesThemeFormatSchemeInvalidfolder),
        ("testgetSlidesThemeFormatSchemeInvalidstorage", testgetSlidesThemeFormatSchemeInvalidstorage),
        ("testmoveFile", testmoveFile),
        ("testmoveFileInvalidsrcPath", testmoveFileInvalidsrcPath),
        ("testmoveFileInvaliddestPath", testmoveFileInvaliddestPath),
        ("testmoveFileInvalidsrcStorageName", testmoveFileInvalidsrcStorageName),
        ("testmoveFileInvaliddestStorageName", testmoveFileInvaliddestStorageName),
        ("testmoveFileInvalidversionId", testmoveFileInvalidversionId),
        ("testmoveFolder", testmoveFolder),
        ("testmoveFolderInvalidsrcPath", testmoveFolderInvalidsrcPath),
        ("testmoveFolderInvaliddestPath", testmoveFolderInvaliddestPath),
        ("testmoveFolderInvalidsrcStorageName", testmoveFolderInvalidsrcStorageName),
        ("testmoveFolderInvaliddestStorageName", testmoveFolderInvaliddestStorageName),
        ("testobjectExists", testobjectExists),
        ("testobjectExistsInvalidpath", testobjectExistsInvalidpath),
        ("testobjectExistsInvalidstorageName", testobjectExistsInvalidstorageName),
        ("testobjectExistsInvalidversionId", testobjectExistsInvalidversionId),
        ("testpostAddNewParagraph", testpostAddNewParagraph),
        ("testpostAddNewParagraphInvalidname", testpostAddNewParagraphInvalidname),
        ("testpostAddNewParagraphInvalidslideIndex", testpostAddNewParagraphInvalidslideIndex),
        ("testpostAddNewParagraphInvalidpath", testpostAddNewParagraphInvalidpath),
        ("testpostAddNewParagraphInvalidshapeIndex", testpostAddNewParagraphInvalidshapeIndex),
        ("testpostAddNewParagraphInvaliddto", testpostAddNewParagraphInvaliddto),
        ("testpostAddNewParagraphInvalidpassword", testpostAddNewParagraphInvalidpassword),
        ("testpostAddNewParagraphInvalidfolder", testpostAddNewParagraphInvalidfolder),
        ("testpostAddNewParagraphInvalidstorage", testpostAddNewParagraphInvalidstorage),
        ("testpostAddNewParagraphInvalidposition", testpostAddNewParagraphInvalidposition),
        ("testpostAddNewPortion", testpostAddNewPortion),
        ("testpostAddNewPortionInvalidname", testpostAddNewPortionInvalidname),
        ("testpostAddNewPortionInvalidslideIndex", testpostAddNewPortionInvalidslideIndex),
        ("testpostAddNewPortionInvalidpath", testpostAddNewPortionInvalidpath),
        ("testpostAddNewPortionInvalidshapeIndex", testpostAddNewPortionInvalidshapeIndex),
        ("testpostAddNewPortionInvalidparagraphIndex", testpostAddNewPortionInvalidparagraphIndex),
        ("testpostAddNewPortionInvaliddto", testpostAddNewPortionInvaliddto),
        ("testpostAddNewPortionInvalidpassword", testpostAddNewPortionInvalidpassword),
        ("testpostAddNewPortionInvalidfolder", testpostAddNewPortionInvalidfolder),
        ("testpostAddNewPortionInvalidstorage", testpostAddNewPortionInvalidstorage),
        ("testpostAddNewPortionInvalidposition", testpostAddNewPortionInvalidposition),
        ("testpostAddNewShape", testpostAddNewShape),
        ("testpostAddNewShapeInvalidname", testpostAddNewShapeInvalidname),
        ("testpostAddNewShapeInvalidslideIndex", testpostAddNewShapeInvalidslideIndex),
        ("testpostAddNewShapeInvalidpath", testpostAddNewShapeInvalidpath),
        ("testpostAddNewShapeInvaliddto", testpostAddNewShapeInvaliddto),
        ("testpostAddNewShapeInvalidpassword", testpostAddNewShapeInvalidpassword),
        ("testpostAddNewShapeInvalidfolder", testpostAddNewShapeInvalidfolder),
        ("testpostAddNewShapeInvalidstorage", testpostAddNewShapeInvalidstorage),
        ("testpostAddNewShapeInvalidshapeToClone", testpostAddNewShapeInvalidshapeToClone),
        ("testpostAddNewShapeInvalidposition", testpostAddNewShapeInvalidposition),
        ("testpostAddNotesSlide", testpostAddNotesSlide),
        ("testpostAddNotesSlideInvalidname", testpostAddNotesSlideInvalidname),
        ("testpostAddNotesSlideInvalidslideIndex", testpostAddNotesSlideInvalidslideIndex),
        ("testpostAddNotesSlideInvaliddto", testpostAddNotesSlideInvaliddto),
        ("testpostAddNotesSlideInvalidpassword", testpostAddNotesSlideInvalidpassword),
        ("testpostAddNotesSlideInvalidfolder", testpostAddNotesSlideInvalidfolder),
        ("testpostAddNotesSlideInvalidstorage", testpostAddNotesSlideInvalidstorage),
        ("testpostCopyLayoutSlideFromSourcePresentation", testpostCopyLayoutSlideFromSourcePresentation),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidname", testpostCopyLayoutSlideFromSourcePresentationInvalidname),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFrom", testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFrom),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPosition", testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPosition),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPassword", testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPassword),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromStorage", testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromStorage),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidpassword", testpostCopyLayoutSlideFromSourcePresentationInvalidpassword),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidfolder", testpostCopyLayoutSlideFromSourcePresentationInvalidfolder),
        ("testpostCopyLayoutSlideFromSourcePresentationInvalidstorage", testpostCopyLayoutSlideFromSourcePresentationInvalidstorage),
        ("testpostCopyMasterSlideFromSourcePresentation", testpostCopyMasterSlideFromSourcePresentation),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidname", testpostCopyMasterSlideFromSourcePresentationInvalidname),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidcloneFrom", testpostCopyMasterSlideFromSourcePresentationInvalidcloneFrom),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPosition", testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPosition),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPassword", testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPassword),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromStorage", testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromStorage),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidapplyToAll", testpostCopyMasterSlideFromSourcePresentationInvalidapplyToAll),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidpassword", testpostCopyMasterSlideFromSourcePresentationInvalidpassword),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidfolder", testpostCopyMasterSlideFromSourcePresentationInvalidfolder),
        ("testpostCopyMasterSlideFromSourcePresentationInvalidstorage", testpostCopyMasterSlideFromSourcePresentationInvalidstorage),
        ("testpostNotesSlideAddNewParagraph", testpostNotesSlideAddNewParagraph),
        ("testpostNotesSlideAddNewParagraphInvalidname", testpostNotesSlideAddNewParagraphInvalidname),
        ("testpostNotesSlideAddNewParagraphInvalidslideIndex", testpostNotesSlideAddNewParagraphInvalidslideIndex),
        ("testpostNotesSlideAddNewParagraphInvalidpath", testpostNotesSlideAddNewParagraphInvalidpath),
        ("testpostNotesSlideAddNewParagraphInvalidshapeIndex", testpostNotesSlideAddNewParagraphInvalidshapeIndex),
        ("testpostNotesSlideAddNewParagraphInvaliddto", testpostNotesSlideAddNewParagraphInvaliddto),
        ("testpostNotesSlideAddNewParagraphInvalidpassword", testpostNotesSlideAddNewParagraphInvalidpassword),
        ("testpostNotesSlideAddNewParagraphInvalidfolder", testpostNotesSlideAddNewParagraphInvalidfolder),
        ("testpostNotesSlideAddNewParagraphInvalidstorage", testpostNotesSlideAddNewParagraphInvalidstorage),
        ("testpostNotesSlideAddNewParagraphInvalidposition", testpostNotesSlideAddNewParagraphInvalidposition),
        ("testpostNotesSlideAddNewPortion", testpostNotesSlideAddNewPortion),
        ("testpostNotesSlideAddNewPortionInvalidname", testpostNotesSlideAddNewPortionInvalidname),
        ("testpostNotesSlideAddNewPortionInvalidslideIndex", testpostNotesSlideAddNewPortionInvalidslideIndex),
        ("testpostNotesSlideAddNewPortionInvalidpath", testpostNotesSlideAddNewPortionInvalidpath),
        ("testpostNotesSlideAddNewPortionInvalidshapeIndex", testpostNotesSlideAddNewPortionInvalidshapeIndex),
        ("testpostNotesSlideAddNewPortionInvalidparagraphIndex", testpostNotesSlideAddNewPortionInvalidparagraphIndex),
        ("testpostNotesSlideAddNewPortionInvaliddto", testpostNotesSlideAddNewPortionInvaliddto),
        ("testpostNotesSlideAddNewPortionInvalidpassword", testpostNotesSlideAddNewPortionInvalidpassword),
        ("testpostNotesSlideAddNewPortionInvalidfolder", testpostNotesSlideAddNewPortionInvalidfolder),
        ("testpostNotesSlideAddNewPortionInvalidstorage", testpostNotesSlideAddNewPortionInvalidstorage),
        ("testpostNotesSlideAddNewPortionInvalidposition", testpostNotesSlideAddNewPortionInvalidposition),
        ("testpostNotesSlideAddNewShape", testpostNotesSlideAddNewShape),
        ("testpostNotesSlideAddNewShapeInvalidname", testpostNotesSlideAddNewShapeInvalidname),
        ("testpostNotesSlideAddNewShapeInvalidslideIndex", testpostNotesSlideAddNewShapeInvalidslideIndex),
        ("testpostNotesSlideAddNewShapeInvalidpath", testpostNotesSlideAddNewShapeInvalidpath),
        ("testpostNotesSlideAddNewShapeInvaliddto", testpostNotesSlideAddNewShapeInvaliddto),
        ("testpostNotesSlideAddNewShapeInvalidpassword", testpostNotesSlideAddNewShapeInvalidpassword),
        ("testpostNotesSlideAddNewShapeInvalidfolder", testpostNotesSlideAddNewShapeInvalidfolder),
        ("testpostNotesSlideAddNewShapeInvalidstorage", testpostNotesSlideAddNewShapeInvalidstorage),
        ("testpostNotesSlideAddNewShapeInvalidshapeToClone", testpostNotesSlideAddNewShapeInvalidshapeToClone),
        ("testpostNotesSlideAddNewShapeInvalidposition", testpostNotesSlideAddNewShapeInvalidposition),
        ("testpostNotesSlideShapeSaveAs", testpostNotesSlideShapeSaveAs),
        ("testpostNotesSlideShapeSaveAsInvalidname", testpostNotesSlideShapeSaveAsInvalidname),
        ("testpostNotesSlideShapeSaveAsInvalidslideIndex", testpostNotesSlideShapeSaveAsInvalidslideIndex),
        ("testpostNotesSlideShapeSaveAsInvalidpath", testpostNotesSlideShapeSaveAsInvalidpath),
        ("testpostNotesSlideShapeSaveAsInvalidshapeIndex", testpostNotesSlideShapeSaveAsInvalidshapeIndex),
        ("testpostNotesSlideShapeSaveAsInvalidformat", testpostNotesSlideShapeSaveAsInvalidformat),
        ("testpostNotesSlideShapeSaveAsInvalidoptions", testpostNotesSlideShapeSaveAsInvalidoptions),
        ("testpostNotesSlideShapeSaveAsInvalidpassword", testpostNotesSlideShapeSaveAsInvalidpassword),
        ("testpostNotesSlideShapeSaveAsInvalidfolder", testpostNotesSlideShapeSaveAsInvalidfolder),
        ("testpostNotesSlideShapeSaveAsInvalidstorage", testpostNotesSlideShapeSaveAsInvalidstorage),
        ("testpostNotesSlideShapeSaveAsInvalidscaleX", testpostNotesSlideShapeSaveAsInvalidscaleX),
        ("testpostNotesSlideShapeSaveAsInvalidscaleY", testpostNotesSlideShapeSaveAsInvalidscaleY),
        ("testpostNotesSlideShapeSaveAsInvalidbounds", testpostNotesSlideShapeSaveAsInvalidbounds),
        ("testpostNotesSlideShapeSaveAsInvalidfontsFolder", testpostNotesSlideShapeSaveAsInvalidfontsFolder),
        ("testpostPresentationMerge", testpostPresentationMerge),
        ("testpostPresentationMergeInvalidname", testpostPresentationMergeInvalidname),
        ("testpostPresentationMergeInvalidrequest", testpostPresentationMergeInvalidrequest),
        ("testpostPresentationMergeInvalidpassword", testpostPresentationMergeInvalidpassword),
        ("testpostPresentationMergeInvalidstorage", testpostPresentationMergeInvalidstorage),
        ("testpostPresentationMergeInvalidfolder", testpostPresentationMergeInvalidfolder),
        ("testpostShapeSaveAs", testpostShapeSaveAs),
        ("testpostShapeSaveAsInvalidname", testpostShapeSaveAsInvalidname),
        ("testpostShapeSaveAsInvalidslideIndex", testpostShapeSaveAsInvalidslideIndex),
        ("testpostShapeSaveAsInvalidpath", testpostShapeSaveAsInvalidpath),
        ("testpostShapeSaveAsInvalidshapeIndex", testpostShapeSaveAsInvalidshapeIndex),
        ("testpostShapeSaveAsInvalidformat", testpostShapeSaveAsInvalidformat),
        ("testpostShapeSaveAsInvalidoptions", testpostShapeSaveAsInvalidoptions),
        ("testpostShapeSaveAsInvalidpassword", testpostShapeSaveAsInvalidpassword),
        ("testpostShapeSaveAsInvalidfolder", testpostShapeSaveAsInvalidfolder),
        ("testpostShapeSaveAsInvalidstorage", testpostShapeSaveAsInvalidstorage),
        ("testpostShapeSaveAsInvalidscaleX", testpostShapeSaveAsInvalidscaleX),
        ("testpostShapeSaveAsInvalidscaleY", testpostShapeSaveAsInvalidscaleY),
        ("testpostShapeSaveAsInvalidbounds", testpostShapeSaveAsInvalidbounds),
        ("testpostShapeSaveAsInvalidfontsFolder", testpostShapeSaveAsInvalidfontsFolder),
        ("testpostSlideAnimationEffect", testpostSlideAnimationEffect),
        ("testpostSlideAnimationEffectInvalidname", testpostSlideAnimationEffectInvalidname),
        ("testpostSlideAnimationEffectInvalidslideIndex", testpostSlideAnimationEffectInvalidslideIndex),
        ("testpostSlideAnimationEffectInvalideffect", testpostSlideAnimationEffectInvalideffect),
        ("testpostSlideAnimationEffectInvalidpassword", testpostSlideAnimationEffectInvalidpassword),
        ("testpostSlideAnimationEffectInvalidfolder", testpostSlideAnimationEffectInvalidfolder),
        ("testpostSlideAnimationEffectInvalidstorage", testpostSlideAnimationEffectInvalidstorage),
        ("testpostSlideAnimationInteractiveSequence", testpostSlideAnimationInteractiveSequence),
        ("testpostSlideAnimationInteractiveSequenceInvalidname", testpostSlideAnimationInteractiveSequenceInvalidname),
        ("testpostSlideAnimationInteractiveSequenceInvalidslideIndex", testpostSlideAnimationInteractiveSequenceInvalidslideIndex),
        ("testpostSlideAnimationInteractiveSequenceInvalidsequence", testpostSlideAnimationInteractiveSequenceInvalidsequence),
        ("testpostSlideAnimationInteractiveSequenceInvalidpassword", testpostSlideAnimationInteractiveSequenceInvalidpassword),
        ("testpostSlideAnimationInteractiveSequenceInvalidfolder", testpostSlideAnimationInteractiveSequenceInvalidfolder),
        ("testpostSlideAnimationInteractiveSequenceInvalidstorage", testpostSlideAnimationInteractiveSequenceInvalidstorage),
        ("testpostSlideAnimationInteractiveSequenceEffect", testpostSlideAnimationInteractiveSequenceEffect),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidname", testpostSlideAnimationInteractiveSequenceEffectInvalidname),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidslideIndex", testpostSlideAnimationInteractiveSequenceEffectInvalidslideIndex),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex", testpostSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalideffect", testpostSlideAnimationInteractiveSequenceEffectInvalideffect),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidpassword", testpostSlideAnimationInteractiveSequenceEffectInvalidpassword),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidfolder", testpostSlideAnimationInteractiveSequenceEffectInvalidfolder),
        ("testpostSlideAnimationInteractiveSequenceEffectInvalidstorage", testpostSlideAnimationInteractiveSequenceEffectInvalidstorage),
        ("testpostSlideSaveAs", testpostSlideSaveAs),
        ("testpostSlideSaveAsInvalidname", testpostSlideSaveAsInvalidname),
        ("testpostSlideSaveAsInvalidslideIndex", testpostSlideSaveAsInvalidslideIndex),
        ("testpostSlideSaveAsInvalidformat", testpostSlideSaveAsInvalidformat),
        ("testpostSlideSaveAsInvalidoptions", testpostSlideSaveAsInvalidoptions),
        ("testpostSlideSaveAsInvalidwidth", testpostSlideSaveAsInvalidwidth),
        ("testpostSlideSaveAsInvalidheight", testpostSlideSaveAsInvalidheight),
        ("testpostSlideSaveAsInvalidpassword", testpostSlideSaveAsInvalidpassword),
        ("testpostSlideSaveAsInvalidfolder", testpostSlideSaveAsInvalidfolder),
        ("testpostSlideSaveAsInvalidstorage", testpostSlideSaveAsInvalidstorage),
        ("testpostSlideSaveAsInvalidfontsFolder", testpostSlideSaveAsInvalidfontsFolder),
        ("testpostSlidesAdd", testpostSlidesAdd),
        ("testpostSlidesAddInvalidname", testpostSlidesAddInvalidname),
        ("testpostSlidesAddInvalidposition", testpostSlidesAddInvalidposition),
        ("testpostSlidesAddInvalidpassword", testpostSlidesAddInvalidpassword),
        ("testpostSlidesAddInvalidfolder", testpostSlidesAddInvalidfolder),
        ("testpostSlidesAddInvalidstorage", testpostSlidesAddInvalidstorage),
        ("testpostSlidesAddInvalidlayoutAlias", testpostSlidesAddInvalidlayoutAlias),
        ("testpostSlidesConvert", testpostSlidesConvert),
        ("testpostSlidesConvertInvalidformat", testpostSlidesConvertInvalidformat),
        ("testpostSlidesConvertInvaliddocument", testpostSlidesConvertInvaliddocument),
        ("testpostSlidesConvertInvalidpassword", testpostSlidesConvertInvalidpassword),
        ("testpostSlidesConvertInvalidfontsFolder", testpostSlidesConvertInvalidfontsFolder),
        ("testpostSlidesCopy", testpostSlidesCopy),
        ("testpostSlidesCopyInvalidname", testpostSlidesCopyInvalidname),
        ("testpostSlidesCopyInvalidslideToCopy", testpostSlidesCopyInvalidslideToCopy),
        ("testpostSlidesCopyInvalidposition", testpostSlidesCopyInvalidposition),
        ("testpostSlidesCopyInvalidsource", testpostSlidesCopyInvalidsource),
        ("testpostSlidesCopyInvalidsourcePassword", testpostSlidesCopyInvalidsourcePassword),
        ("testpostSlidesCopyInvalidsourceStorage", testpostSlidesCopyInvalidsourceStorage),
        ("testpostSlidesCopyInvalidpassword", testpostSlidesCopyInvalidpassword),
        ("testpostSlidesCopyInvalidfolder", testpostSlidesCopyInvalidfolder),
        ("testpostSlidesCopyInvalidstorage", testpostSlidesCopyInvalidstorage),
        ("testpostSlidesDocument", testpostSlidesDocument),
        ("testpostSlidesDocumentInvalidname", testpostSlidesDocumentInvalidname),
        ("testpostSlidesDocumentInvaliddata", testpostSlidesDocumentInvaliddata),
        ("testpostSlidesDocumentInvalidinputPassword", testpostSlidesDocumentInvalidinputPassword),
        ("testpostSlidesDocumentInvalidpassword", testpostSlidesDocumentInvalidpassword),
        ("testpostSlidesDocumentInvalidstorage", testpostSlidesDocumentInvalidstorage),
        ("testpostSlidesDocumentInvalidfolder", testpostSlidesDocumentInvalidfolder),
        ("testpostSlidesDocumentFromHtml", testpostSlidesDocumentFromHtml),
        ("testpostSlidesDocumentFromHtmlInvalidname", testpostSlidesDocumentFromHtmlInvalidname),
        ("testpostSlidesDocumentFromHtmlInvalidhtml", testpostSlidesDocumentFromHtmlInvalidhtml),
        ("testpostSlidesDocumentFromHtmlInvalidpassword", testpostSlidesDocumentFromHtmlInvalidpassword),
        ("testpostSlidesDocumentFromHtmlInvalidstorage", testpostSlidesDocumentFromHtmlInvalidstorage),
        ("testpostSlidesDocumentFromHtmlInvalidfolder", testpostSlidesDocumentFromHtmlInvalidfolder),
        ("testpostSlidesDocumentFromSource", testpostSlidesDocumentFromSource),
        ("testpostSlidesDocumentFromSourceInvalidname", testpostSlidesDocumentFromSourceInvalidname),
        ("testpostSlidesDocumentFromSourceInvalidsourcePath", testpostSlidesDocumentFromSourceInvalidsourcePath),
        ("testpostSlidesDocumentFromSourceInvalidsourcePassword", testpostSlidesDocumentFromSourceInvalidsourcePassword),
        ("testpostSlidesDocumentFromSourceInvalidsourceStorage", testpostSlidesDocumentFromSourceInvalidsourceStorage),
        ("testpostSlidesDocumentFromSourceInvalidpassword", testpostSlidesDocumentFromSourceInvalidpassword),
        ("testpostSlidesDocumentFromSourceInvalidstorage", testpostSlidesDocumentFromSourceInvalidstorage),
        ("testpostSlidesDocumentFromSourceInvalidfolder", testpostSlidesDocumentFromSourceInvalidfolder),
        ("testpostSlidesDocumentFromTemplate", testpostSlidesDocumentFromTemplate),
        ("testpostSlidesDocumentFromTemplateInvalidname", testpostSlidesDocumentFromTemplateInvalidname),
        ("testpostSlidesDocumentFromTemplateInvalidtemplatePath", testpostSlidesDocumentFromTemplateInvalidtemplatePath),
        ("testpostSlidesDocumentFromTemplateInvaliddata", testpostSlidesDocumentFromTemplateInvaliddata),
        ("testpostSlidesDocumentFromTemplateInvalidtemplatePassword", testpostSlidesDocumentFromTemplateInvalidtemplatePassword),
        ("testpostSlidesDocumentFromTemplateInvalidtemplateStorage", testpostSlidesDocumentFromTemplateInvalidtemplateStorage),
        ("testpostSlidesDocumentFromTemplateInvalidisImageDataEmbedded", testpostSlidesDocumentFromTemplateInvalidisImageDataEmbedded),
        ("testpostSlidesDocumentFromTemplateInvalidpassword", testpostSlidesDocumentFromTemplateInvalidpassword),
        ("testpostSlidesDocumentFromTemplateInvalidstorage", testpostSlidesDocumentFromTemplateInvalidstorage),
        ("testpostSlidesDocumentFromTemplateInvalidfolder", testpostSlidesDocumentFromTemplateInvalidfolder),
        ("testpostSlidesPipeline", testpostSlidesPipeline),
        ("testpostSlidesPipelineInvalidpipeline", testpostSlidesPipelineInvalidpipeline),
        ("testpostSlidesPresentationReplaceText", testpostSlidesPresentationReplaceText),
        ("testpostSlidesPresentationReplaceTextInvalidname", testpostSlidesPresentationReplaceTextInvalidname),
        ("testpostSlidesPresentationReplaceTextInvalidoldValue", testpostSlidesPresentationReplaceTextInvalidoldValue),
        ("testpostSlidesPresentationReplaceTextInvalidnewValue", testpostSlidesPresentationReplaceTextInvalidnewValue),
        ("testpostSlidesPresentationReplaceTextInvalidignoreCase", testpostSlidesPresentationReplaceTextInvalidignoreCase),
        ("testpostSlidesPresentationReplaceTextInvalidpassword", testpostSlidesPresentationReplaceTextInvalidpassword),
        ("testpostSlidesPresentationReplaceTextInvalidfolder", testpostSlidesPresentationReplaceTextInvalidfolder),
        ("testpostSlidesPresentationReplaceTextInvalidstorage", testpostSlidesPresentationReplaceTextInvalidstorage),
        ("testpostSlidesReorder", testpostSlidesReorder),
        ("testpostSlidesReorderInvalidname", testpostSlidesReorderInvalidname),
        ("testpostSlidesReorderInvalidslideIndex", testpostSlidesReorderInvalidslideIndex),
        ("testpostSlidesReorderInvalidnewPosition", testpostSlidesReorderInvalidnewPosition),
        ("testpostSlidesReorderInvalidpassword", testpostSlidesReorderInvalidpassword),
        ("testpostSlidesReorderInvalidfolder", testpostSlidesReorderInvalidfolder),
        ("testpostSlidesReorderInvalidstorage", testpostSlidesReorderInvalidstorage),
        ("testpostSlidesReorderMany", testpostSlidesReorderMany),
        ("testpostSlidesReorderManyInvalidname", testpostSlidesReorderManyInvalidname),
        ("testpostSlidesReorderManyInvalidoldPositions", testpostSlidesReorderManyInvalidoldPositions),
        ("testpostSlidesReorderManyInvalidnewPositions", testpostSlidesReorderManyInvalidnewPositions),
        ("testpostSlidesReorderManyInvalidpassword", testpostSlidesReorderManyInvalidpassword),
        ("testpostSlidesReorderManyInvalidfolder", testpostSlidesReorderManyInvalidfolder),
        ("testpostSlidesReorderManyInvalidstorage", testpostSlidesReorderManyInvalidstorage),
        ("testpostSlidesSaveAs", testpostSlidesSaveAs),
        ("testpostSlidesSaveAsInvalidname", testpostSlidesSaveAsInvalidname),
        ("testpostSlidesSaveAsInvalidformat", testpostSlidesSaveAsInvalidformat),
        ("testpostSlidesSaveAsInvalidoptions", testpostSlidesSaveAsInvalidoptions),
        ("testpostSlidesSaveAsInvalidpassword", testpostSlidesSaveAsInvalidpassword),
        ("testpostSlidesSaveAsInvalidstorage", testpostSlidesSaveAsInvalidstorage),
        ("testpostSlidesSaveAsInvalidfolder", testpostSlidesSaveAsInvalidfolder),
        ("testpostSlidesSaveAsInvalidfontsFolder", testpostSlidesSaveAsInvalidfontsFolder),
        ("testpostSlidesSetDocumentProperties", testpostSlidesSetDocumentProperties),
        ("testpostSlidesSetDocumentPropertiesInvalidname", testpostSlidesSetDocumentPropertiesInvalidname),
        ("testpostSlidesSetDocumentPropertiesInvalidproperties", testpostSlidesSetDocumentPropertiesInvalidproperties),
        ("testpostSlidesSetDocumentPropertiesInvalidpassword", testpostSlidesSetDocumentPropertiesInvalidpassword),
        ("testpostSlidesSetDocumentPropertiesInvalidfolder", testpostSlidesSetDocumentPropertiesInvalidfolder),
        ("testpostSlidesSetDocumentPropertiesInvalidstorage", testpostSlidesSetDocumentPropertiesInvalidstorage),
        ("testpostSlidesSlideReplaceText", testpostSlidesSlideReplaceText),
        ("testpostSlidesSlideReplaceTextInvalidname", testpostSlidesSlideReplaceTextInvalidname),
        ("testpostSlidesSlideReplaceTextInvalidslideIndex", testpostSlidesSlideReplaceTextInvalidslideIndex),
        ("testpostSlidesSlideReplaceTextInvalidoldValue", testpostSlidesSlideReplaceTextInvalidoldValue),
        ("testpostSlidesSlideReplaceTextInvalidnewValue", testpostSlidesSlideReplaceTextInvalidnewValue),
        ("testpostSlidesSlideReplaceTextInvalidignoreCase", testpostSlidesSlideReplaceTextInvalidignoreCase),
        ("testpostSlidesSlideReplaceTextInvalidpassword", testpostSlidesSlideReplaceTextInvalidpassword),
        ("testpostSlidesSlideReplaceTextInvalidfolder", testpostSlidesSlideReplaceTextInvalidfolder),
        ("testpostSlidesSlideReplaceTextInvalidstorage", testpostSlidesSlideReplaceTextInvalidstorage),
        ("testpostSlidesSplit", testpostSlidesSplit),
        ("testpostSlidesSplitInvalidname", testpostSlidesSplitInvalidname),
        ("testpostSlidesSplitInvalidoptions", testpostSlidesSplitInvalidoptions),
        ("testpostSlidesSplitInvalidformat", testpostSlidesSplitInvalidformat),
        ("testpostSlidesSplitInvalidwidth", testpostSlidesSplitInvalidwidth),
        ("testpostSlidesSplitInvalidheight", testpostSlidesSplitInvalidheight),
        ("testpostSlidesSplitInvalidto", testpostSlidesSplitInvalidto),
        ("testpostSlidesSplitInvalidfrom", testpostSlidesSplitInvalidfrom),
        ("testpostSlidesSplitInvaliddestFolder", testpostSlidesSplitInvaliddestFolder),
        ("testpostSlidesSplitInvalidpassword", testpostSlidesSplitInvalidpassword),
        ("testpostSlidesSplitInvalidstorage", testpostSlidesSplitInvalidstorage),
        ("testpostSlidesSplitInvalidfolder", testpostSlidesSplitInvalidfolder),
        ("testpostSlidesSplitInvalidfontsFolder", testpostSlidesSplitInvalidfontsFolder),
        ("testputLayoutSlide", testputLayoutSlide),
        ("testputLayoutSlideInvalidname", testputLayoutSlideInvalidname),
        ("testputLayoutSlideInvalidslideIndex", testputLayoutSlideInvalidslideIndex),
        ("testputLayoutSlideInvalidslideDto", testputLayoutSlideInvalidslideDto),
        ("testputLayoutSlideInvalidpassword", testputLayoutSlideInvalidpassword),
        ("testputLayoutSlideInvalidfolder", testputLayoutSlideInvalidfolder),
        ("testputLayoutSlideInvalidstorage", testputLayoutSlideInvalidstorage),
        ("testputNotesSlideShapeSaveAs", testputNotesSlideShapeSaveAs),
        ("testputNotesSlideShapeSaveAsInvalidname", testputNotesSlideShapeSaveAsInvalidname),
        ("testputNotesSlideShapeSaveAsInvalidslideIndex", testputNotesSlideShapeSaveAsInvalidslideIndex),
        ("testputNotesSlideShapeSaveAsInvalidpath", testputNotesSlideShapeSaveAsInvalidpath),
        ("testputNotesSlideShapeSaveAsInvalidshapeIndex", testputNotesSlideShapeSaveAsInvalidshapeIndex),
        ("testputNotesSlideShapeSaveAsInvalidformat", testputNotesSlideShapeSaveAsInvalidformat),
        ("testputNotesSlideShapeSaveAsInvalidoutPath", testputNotesSlideShapeSaveAsInvalidoutPath),
        ("testputNotesSlideShapeSaveAsInvalidoptions", testputNotesSlideShapeSaveAsInvalidoptions),
        ("testputNotesSlideShapeSaveAsInvalidpassword", testputNotesSlideShapeSaveAsInvalidpassword),
        ("testputNotesSlideShapeSaveAsInvalidfolder", testputNotesSlideShapeSaveAsInvalidfolder),
        ("testputNotesSlideShapeSaveAsInvalidstorage", testputNotesSlideShapeSaveAsInvalidstorage),
        ("testputNotesSlideShapeSaveAsInvalidscaleX", testputNotesSlideShapeSaveAsInvalidscaleX),
        ("testputNotesSlideShapeSaveAsInvalidscaleY", testputNotesSlideShapeSaveAsInvalidscaleY),
        ("testputNotesSlideShapeSaveAsInvalidbounds", testputNotesSlideShapeSaveAsInvalidbounds),
        ("testputNotesSlideShapeSaveAsInvalidfontsFolder", testputNotesSlideShapeSaveAsInvalidfontsFolder),
        ("testputPresentationMerge", testputPresentationMerge),
        ("testputPresentationMergeInvalidname", testputPresentationMergeInvalidname),
        ("testputPresentationMergeInvalidrequest", testputPresentationMergeInvalidrequest),
        ("testputPresentationMergeInvalidpassword", testputPresentationMergeInvalidpassword),
        ("testputPresentationMergeInvalidstorage", testputPresentationMergeInvalidstorage),
        ("testputPresentationMergeInvalidfolder", testputPresentationMergeInvalidfolder),
        ("testputSetParagraphPortionProperties", testputSetParagraphPortionProperties),
        ("testputSetParagraphPortionPropertiesInvalidname", testputSetParagraphPortionPropertiesInvalidname),
        ("testputSetParagraphPortionPropertiesInvalidslideIndex", testputSetParagraphPortionPropertiesInvalidslideIndex),
        ("testputSetParagraphPortionPropertiesInvalidpath", testputSetParagraphPortionPropertiesInvalidpath),
        ("testputSetParagraphPortionPropertiesInvalidshapeIndex", testputSetParagraphPortionPropertiesInvalidshapeIndex),
        ("testputSetParagraphPortionPropertiesInvalidparagraphIndex", testputSetParagraphPortionPropertiesInvalidparagraphIndex),
        ("testputSetParagraphPortionPropertiesInvalidportionIndex", testputSetParagraphPortionPropertiesInvalidportionIndex),
        ("testputSetParagraphPortionPropertiesInvaliddto", testputSetParagraphPortionPropertiesInvaliddto),
        ("testputSetParagraphPortionPropertiesInvalidpassword", testputSetParagraphPortionPropertiesInvalidpassword),
        ("testputSetParagraphPortionPropertiesInvalidfolder", testputSetParagraphPortionPropertiesInvalidfolder),
        ("testputSetParagraphPortionPropertiesInvalidstorage", testputSetParagraphPortionPropertiesInvalidstorage),
        ("testputSetParagraphProperties", testputSetParagraphProperties),
        ("testputSetParagraphPropertiesInvalidname", testputSetParagraphPropertiesInvalidname),
        ("testputSetParagraphPropertiesInvalidslideIndex", testputSetParagraphPropertiesInvalidslideIndex),
        ("testputSetParagraphPropertiesInvalidpath", testputSetParagraphPropertiesInvalidpath),
        ("testputSetParagraphPropertiesInvalidshapeIndex", testputSetParagraphPropertiesInvalidshapeIndex),
        ("testputSetParagraphPropertiesInvalidparagraphIndex", testputSetParagraphPropertiesInvalidparagraphIndex),
        ("testputSetParagraphPropertiesInvaliddto", testputSetParagraphPropertiesInvaliddto),
        ("testputSetParagraphPropertiesInvalidpassword", testputSetParagraphPropertiesInvalidpassword),
        ("testputSetParagraphPropertiesInvalidfolder", testputSetParagraphPropertiesInvalidfolder),
        ("testputSetParagraphPropertiesInvalidstorage", testputSetParagraphPropertiesInvalidstorage),
        ("testputShapeSaveAs", testputShapeSaveAs),
        ("testputShapeSaveAsInvalidname", testputShapeSaveAsInvalidname),
        ("testputShapeSaveAsInvalidslideIndex", testputShapeSaveAsInvalidslideIndex),
        ("testputShapeSaveAsInvalidpath", testputShapeSaveAsInvalidpath),
        ("testputShapeSaveAsInvalidshapeIndex", testputShapeSaveAsInvalidshapeIndex),
        ("testputShapeSaveAsInvalidformat", testputShapeSaveAsInvalidformat),
        ("testputShapeSaveAsInvalidoutPath", testputShapeSaveAsInvalidoutPath),
        ("testputShapeSaveAsInvalidoptions", testputShapeSaveAsInvalidoptions),
        ("testputShapeSaveAsInvalidpassword", testputShapeSaveAsInvalidpassword),
        ("testputShapeSaveAsInvalidfolder", testputShapeSaveAsInvalidfolder),
        ("testputShapeSaveAsInvalidstorage", testputShapeSaveAsInvalidstorage),
        ("testputShapeSaveAsInvalidscaleX", testputShapeSaveAsInvalidscaleX),
        ("testputShapeSaveAsInvalidscaleY", testputShapeSaveAsInvalidscaleY),
        ("testputShapeSaveAsInvalidbounds", testputShapeSaveAsInvalidbounds),
        ("testputShapeSaveAsInvalidfontsFolder", testputShapeSaveAsInvalidfontsFolder),
        ("testputSlideAnimation", testputSlideAnimation),
        ("testputSlideAnimationInvalidname", testputSlideAnimationInvalidname),
        ("testputSlideAnimationInvalidslideIndex", testputSlideAnimationInvalidslideIndex),
        ("testputSlideAnimationInvalidanimation", testputSlideAnimationInvalidanimation),
        ("testputSlideAnimationInvalidpassword", testputSlideAnimationInvalidpassword),
        ("testputSlideAnimationInvalidfolder", testputSlideAnimationInvalidfolder),
        ("testputSlideAnimationInvalidstorage", testputSlideAnimationInvalidstorage),
        ("testputSlideAnimationEffect", testputSlideAnimationEffect),
        ("testputSlideAnimationEffectInvalidname", testputSlideAnimationEffectInvalidname),
        ("testputSlideAnimationEffectInvalidslideIndex", testputSlideAnimationEffectInvalidslideIndex),
        ("testputSlideAnimationEffectInvalideffectIndex", testputSlideAnimationEffectInvalideffectIndex),
        ("testputSlideAnimationEffectInvalideffect", testputSlideAnimationEffectInvalideffect),
        ("testputSlideAnimationEffectInvalidpassword", testputSlideAnimationEffectInvalidpassword),
        ("testputSlideAnimationEffectInvalidfolder", testputSlideAnimationEffectInvalidfolder),
        ("testputSlideAnimationEffectInvalidstorage", testputSlideAnimationEffectInvalidstorage),
        ("testputSlideAnimationInteractiveSequenceEffect", testputSlideAnimationInteractiveSequenceEffect),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidname", testputSlideAnimationInteractiveSequenceEffectInvalidname),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidslideIndex", testputSlideAnimationInteractiveSequenceEffectInvalidslideIndex),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex", testputSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex),
        ("testputSlideAnimationInteractiveSequenceEffectInvalideffectIndex", testputSlideAnimationInteractiveSequenceEffectInvalideffectIndex),
        ("testputSlideAnimationInteractiveSequenceEffectInvalideffect", testputSlideAnimationInteractiveSequenceEffectInvalideffect),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidpassword", testputSlideAnimationInteractiveSequenceEffectInvalidpassword),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidfolder", testputSlideAnimationInteractiveSequenceEffectInvalidfolder),
        ("testputSlideAnimationInteractiveSequenceEffectInvalidstorage", testputSlideAnimationInteractiveSequenceEffectInvalidstorage),
        ("testputSlideSaveAs", testputSlideSaveAs),
        ("testputSlideSaveAsInvalidname", testputSlideSaveAsInvalidname),
        ("testputSlideSaveAsInvalidslideIndex", testputSlideSaveAsInvalidslideIndex),
        ("testputSlideSaveAsInvalidformat", testputSlideSaveAsInvalidformat),
        ("testputSlideSaveAsInvalidoutPath", testputSlideSaveAsInvalidoutPath),
        ("testputSlideSaveAsInvalidoptions", testputSlideSaveAsInvalidoptions),
        ("testputSlideSaveAsInvalidwidth", testputSlideSaveAsInvalidwidth),
        ("testputSlideSaveAsInvalidheight", testputSlideSaveAsInvalidheight),
        ("testputSlideSaveAsInvalidpassword", testputSlideSaveAsInvalidpassword),
        ("testputSlideSaveAsInvalidfolder", testputSlideSaveAsInvalidfolder),
        ("testputSlideSaveAsInvalidstorage", testputSlideSaveAsInvalidstorage),
        ("testputSlideSaveAsInvalidfontsFolder", testputSlideSaveAsInvalidfontsFolder),
        ("testputSlideShapeInfo", testputSlideShapeInfo),
        ("testputSlideShapeInfoInvalidname", testputSlideShapeInfoInvalidname),
        ("testputSlideShapeInfoInvalidslideIndex", testputSlideShapeInfoInvalidslideIndex),
        ("testputSlideShapeInfoInvalidpath", testputSlideShapeInfoInvalidpath),
        ("testputSlideShapeInfoInvalidshapeIndex", testputSlideShapeInfoInvalidshapeIndex),
        ("testputSlideShapeInfoInvaliddto", testputSlideShapeInfoInvaliddto),
        ("testputSlideShapeInfoInvalidpassword", testputSlideShapeInfoInvalidpassword),
        ("testputSlideShapeInfoInvalidfolder", testputSlideShapeInfoInvalidfolder),
        ("testputSlideShapeInfoInvalidstorage", testputSlideShapeInfoInvalidstorage),
        ("testputSlidesConvert", testputSlidesConvert),
        ("testputSlidesConvertInvalidformat", testputSlidesConvertInvalidformat),
        ("testputSlidesConvertInvalidoutPath", testputSlidesConvertInvalidoutPath),
        ("testputSlidesConvertInvaliddocument", testputSlidesConvertInvaliddocument),
        ("testputSlidesConvertInvalidpassword", testputSlidesConvertInvalidpassword),
        ("testputSlidesConvertInvalidfontsFolder", testputSlidesConvertInvalidfontsFolder),
        ("testputSlidesDocumentFromHtml", testputSlidesDocumentFromHtml),
        ("testputSlidesDocumentFromHtmlInvalidname", testputSlidesDocumentFromHtmlInvalidname),
        ("testputSlidesDocumentFromHtmlInvalidhtml", testputSlidesDocumentFromHtmlInvalidhtml),
        ("testputSlidesDocumentFromHtmlInvalidpassword", testputSlidesDocumentFromHtmlInvalidpassword),
        ("testputSlidesDocumentFromHtmlInvalidstorage", testputSlidesDocumentFromHtmlInvalidstorage),
        ("testputSlidesDocumentFromHtmlInvalidfolder", testputSlidesDocumentFromHtmlInvalidfolder),
        ("testputSlidesSaveAs", testputSlidesSaveAs),
        ("testputSlidesSaveAsInvalidname", testputSlidesSaveAsInvalidname),
        ("testputSlidesSaveAsInvalidoutPath", testputSlidesSaveAsInvalidoutPath),
        ("testputSlidesSaveAsInvalidformat", testputSlidesSaveAsInvalidformat),
        ("testputSlidesSaveAsInvalidoptions", testputSlidesSaveAsInvalidoptions),
        ("testputSlidesSaveAsInvalidpassword", testputSlidesSaveAsInvalidpassword),
        ("testputSlidesSaveAsInvalidstorage", testputSlidesSaveAsInvalidstorage),
        ("testputSlidesSaveAsInvalidfolder", testputSlidesSaveAsInvalidfolder),
        ("testputSlidesSaveAsInvalidfontsFolder", testputSlidesSaveAsInvalidfontsFolder),
        ("testputSlidesSetDocumentProperty", testputSlidesSetDocumentProperty),
        ("testputSlidesSetDocumentPropertyInvalidname", testputSlidesSetDocumentPropertyInvalidname),
        ("testputSlidesSetDocumentPropertyInvalidpropertyName", testputSlidesSetDocumentPropertyInvalidpropertyName),
        ("testputSlidesSetDocumentPropertyInvalidproperty", testputSlidesSetDocumentPropertyInvalidproperty),
        ("testputSlidesSetDocumentPropertyInvalidpassword", testputSlidesSetDocumentPropertyInvalidpassword),
        ("testputSlidesSetDocumentPropertyInvalidfolder", testputSlidesSetDocumentPropertyInvalidfolder),
        ("testputSlidesSetDocumentPropertyInvalidstorage", testputSlidesSetDocumentPropertyInvalidstorage),
        ("testputSlidesSlide", testputSlidesSlide),
        ("testputSlidesSlideInvalidname", testputSlidesSlideInvalidname),
        ("testputSlidesSlideInvalidslideIndex", testputSlidesSlideInvalidslideIndex),
        ("testputSlidesSlideInvalidslideDto", testputSlidesSlideInvalidslideDto),
        ("testputSlidesSlideInvalidpassword", testputSlidesSlideInvalidpassword),
        ("testputSlidesSlideInvalidfolder", testputSlidesSlideInvalidfolder),
        ("testputSlidesSlideInvalidstorage", testputSlidesSlideInvalidstorage),
        ("testputSlidesSlideBackground", testputSlidesSlideBackground),
        ("testputSlidesSlideBackgroundInvalidname", testputSlidesSlideBackgroundInvalidname),
        ("testputSlidesSlideBackgroundInvalidslideIndex", testputSlidesSlideBackgroundInvalidslideIndex),
        ("testputSlidesSlideBackgroundInvalidbackground", testputSlidesSlideBackgroundInvalidbackground),
        ("testputSlidesSlideBackgroundInvalidfolder", testputSlidesSlideBackgroundInvalidfolder),
        ("testputSlidesSlideBackgroundInvalidpassword", testputSlidesSlideBackgroundInvalidpassword),
        ("testputSlidesSlideBackgroundInvalidstorage", testputSlidesSlideBackgroundInvalidstorage),
        ("testputSlidesSlideBackgroundColor", testputSlidesSlideBackgroundColor),
        ("testputSlidesSlideBackgroundColorInvalidname", testputSlidesSlideBackgroundColorInvalidname),
        ("testputSlidesSlideBackgroundColorInvalidslideIndex", testputSlidesSlideBackgroundColorInvalidslideIndex),
        ("testputSlidesSlideBackgroundColorInvalidcolor", testputSlidesSlideBackgroundColorInvalidcolor),
        ("testputSlidesSlideBackgroundColorInvalidfolder", testputSlidesSlideBackgroundColorInvalidfolder),
        ("testputSlidesSlideBackgroundColorInvalidpassword", testputSlidesSlideBackgroundColorInvalidpassword),
        ("testputSlidesSlideBackgroundColorInvalidstorage", testputSlidesSlideBackgroundColorInvalidstorage),
        ("testputSlidesSlideSize", testputSlidesSlideSize),
        ("testputSlidesSlideSizeInvalidname", testputSlidesSlideSizeInvalidname),
        ("testputSlidesSlideSizeInvalidpassword", testputSlidesSlideSizeInvalidpassword),
        ("testputSlidesSlideSizeInvalidstorage", testputSlidesSlideSizeInvalidstorage),
        ("testputSlidesSlideSizeInvalidfolder", testputSlidesSlideSizeInvalidfolder),
        ("testputSlidesSlideSizeInvalidwidth", testputSlidesSlideSizeInvalidwidth),
        ("testputSlidesSlideSizeInvalidheight", testputSlidesSlideSizeInvalidheight),
        ("testputSlidesSlideSizeInvalidsizeType", testputSlidesSlideSizeInvalidsizeType),
        ("testputSlidesSlideSizeInvalidscaleType", testputSlidesSlideSizeInvalidscaleType),
        ("testputUpdateNotesSlide", testputUpdateNotesSlide),
        ("testputUpdateNotesSlideInvalidname", testputUpdateNotesSlideInvalidname),
        ("testputUpdateNotesSlideInvalidslideIndex", testputUpdateNotesSlideInvalidslideIndex),
        ("testputUpdateNotesSlideInvaliddto", testputUpdateNotesSlideInvaliddto),
        ("testputUpdateNotesSlideInvalidpassword", testputUpdateNotesSlideInvalidpassword),
        ("testputUpdateNotesSlideInvalidfolder", testputUpdateNotesSlideInvalidfolder),
        ("testputUpdateNotesSlideInvalidstorage", testputUpdateNotesSlideInvalidstorage),
        ("testputUpdateNotesSlideShape", testputUpdateNotesSlideShape),
        ("testputUpdateNotesSlideShapeInvalidname", testputUpdateNotesSlideShapeInvalidname),
        ("testputUpdateNotesSlideShapeInvalidslideIndex", testputUpdateNotesSlideShapeInvalidslideIndex),
        ("testputUpdateNotesSlideShapeInvalidpath", testputUpdateNotesSlideShapeInvalidpath),
        ("testputUpdateNotesSlideShapeInvalidshapeIndex", testputUpdateNotesSlideShapeInvalidshapeIndex),
        ("testputUpdateNotesSlideShapeInvaliddto", testputUpdateNotesSlideShapeInvaliddto),
        ("testputUpdateNotesSlideShapeInvalidpassword", testputUpdateNotesSlideShapeInvalidpassword),
        ("testputUpdateNotesSlideShapeInvalidfolder", testputUpdateNotesSlideShapeInvalidfolder),
        ("testputUpdateNotesSlideShapeInvalidstorage", testputUpdateNotesSlideShapeInvalidstorage),
        ("testputUpdateNotesSlideShapeParagraph", testputUpdateNotesSlideShapeParagraph),
        ("testputUpdateNotesSlideShapeParagraphInvalidname", testputUpdateNotesSlideShapeParagraphInvalidname),
        ("testputUpdateNotesSlideShapeParagraphInvalidslideIndex", testputUpdateNotesSlideShapeParagraphInvalidslideIndex),
        ("testputUpdateNotesSlideShapeParagraphInvalidpath", testputUpdateNotesSlideShapeParagraphInvalidpath),
        ("testputUpdateNotesSlideShapeParagraphInvalidshapeIndex", testputUpdateNotesSlideShapeParagraphInvalidshapeIndex),
        ("testputUpdateNotesSlideShapeParagraphInvalidparagraphIndex", testputUpdateNotesSlideShapeParagraphInvalidparagraphIndex),
        ("testputUpdateNotesSlideShapeParagraphInvaliddto", testputUpdateNotesSlideShapeParagraphInvaliddto),
        ("testputUpdateNotesSlideShapeParagraphInvalidpassword", testputUpdateNotesSlideShapeParagraphInvalidpassword),
        ("testputUpdateNotesSlideShapeParagraphInvalidfolder", testputUpdateNotesSlideShapeParagraphInvalidfolder),
        ("testputUpdateNotesSlideShapeParagraphInvalidstorage", testputUpdateNotesSlideShapeParagraphInvalidstorage),
        ("testputUpdateNotesSlideShapePortion", testputUpdateNotesSlideShapePortion),
        ("testputUpdateNotesSlideShapePortionInvalidname", testputUpdateNotesSlideShapePortionInvalidname),
        ("testputUpdateNotesSlideShapePortionInvalidslideIndex", testputUpdateNotesSlideShapePortionInvalidslideIndex),
        ("testputUpdateNotesSlideShapePortionInvalidpath", testputUpdateNotesSlideShapePortionInvalidpath),
        ("testputUpdateNotesSlideShapePortionInvalidshapeIndex", testputUpdateNotesSlideShapePortionInvalidshapeIndex),
        ("testputUpdateNotesSlideShapePortionInvalidparagraphIndex", testputUpdateNotesSlideShapePortionInvalidparagraphIndex),
        ("testputUpdateNotesSlideShapePortionInvalidportionIndex", testputUpdateNotesSlideShapePortionInvalidportionIndex),
        ("testputUpdateNotesSlideShapePortionInvaliddto", testputUpdateNotesSlideShapePortionInvaliddto),
        ("testputUpdateNotesSlideShapePortionInvalidpassword", testputUpdateNotesSlideShapePortionInvalidpassword),
        ("testputUpdateNotesSlideShapePortionInvalidfolder", testputUpdateNotesSlideShapePortionInvalidfolder),
        ("testputUpdateNotesSlideShapePortionInvalidstorage", testputUpdateNotesSlideShapePortionInvalidstorage),
        ("teststorageExists", teststorageExists),
        ("teststorageExistsInvalidstorageName", teststorageExistsInvalidstorageName),
        ("testuploadFile", testuploadFile),
        ("testuploadFileInvalidpath", testuploadFileInvalidpath),
        ("testuploadFileInvalidfile", testuploadFileInvalidfile),
        ("testuploadFileInvalidstorageName", testuploadFileInvalidstorageName),
    ];
    
    internal let testTimeout: TimeInterval = 200.0 

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }    
    
    func testcopyFile() {
        let expectation = self.expectation(description: "testcopyFile")
        let request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        TestUtils.initialize("copyFile") { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFileInvalidsrcPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("copyFile", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFileInvaliddestPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("copyFile", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFileInvalidsrcStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFileInvaliddestStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFileInvalidversionId() {
        let expectation = self.expectation(description: "testcopyFile")
        var request = copyFileRequest(srcPath: TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("copyFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.copyFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testcopyFolder() {
        let expectation = self.expectation(description: "testcopyFolder")
        let request = copyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        TestUtils.initialize("copyFolder") { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFolderInvalidsrcPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = copyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFolderInvaliddestPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = copyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFolderInvalidsrcStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = copyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcopyFolderInvaliddestStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var request = copyFolderRequest(srcPath: TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testcreateFolder() {
        let expectation = self.expectation(description: "testcreateFolder")
        let request = createFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        TestUtils.initialize("createFolder") { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcreateFolderInvalidpath() {
        let expectation = self.expectation(description: "testcreateFolder")
        var request = createFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("createFolder", "path", request.path) { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcreateFolderInvalidstorageName() {
        let expectation = self.expectation(description: "testcreateFolder")
        var request = createFolderRequest(path: TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("createFolder", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.createFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteFile() {
        let expectation = self.expectation(description: "testdeleteFile")
        let request = deleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        TestUtils.initialize("deleteFile") { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFileInvalidpath() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = deleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFileInvalidstorageName() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = deleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("deleteFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFileInvalidversionId() {
        let expectation = self.expectation(description: "testdeleteFile")
        var request = deleteFileRequest(path: TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("deleteFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.deleteFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteFolder() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let request = deleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        TestUtils.initialize("deleteFolder") { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFolderInvalidpath() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = deleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteFolder", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFolderInvalidstorageName() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = deleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("deleteFolder", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteFolderInvalidrecursive() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var request = deleteFolderRequest(path: TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String"), recursive: TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool"))
        request.recursive = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "recursive", value: request.recursive as Any, type: "Bool")
        TestUtils.initialize("deleteFolder", "recursive", request.recursive) { (response, error) -> Void in
            SlidesAPI.deleteFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "recursive", parameterValue: request.recursive as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlide() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlide") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var request = deleteNotesSlideRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlideParagraph() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        let request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var request = deleteNotesSlideParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlideParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        let request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidparagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.paragraphs = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", value: request.paragraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideParagraphs", "paragraphs", request.paragraphs) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "paragraphs", parameterValue: request.paragraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideParagraphsInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var request = deleteNotesSlideParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlidePortion() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        let request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidportionIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var request = deleteNotesSlidePortionRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlidePortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        let request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlidePortions") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidportions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.portions = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "portions", value: request.portions as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlidePortions", "portions", request.portions) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "portions", parameterValue: request.portions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlidePortionsInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var request = deleteNotesSlidePortionsRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlideShape() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        let request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapeInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var request = deleteNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteNotesSlideShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        let request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("deleteNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidname() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidpath() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidshapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.shapes = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", value: request.shapes as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideShapes", "shapes", request.shapes) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "shapes", parameterValue: request.shapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteNotesSlideShapesInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var request = deleteNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteParagraph() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        TestUtils.initialize("deleteParagraph") { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidname() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidpath() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var request = deleteParagraphRequest(name: TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("deleteParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidname() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidpath() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidparagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.paragraphs = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "paragraphs", value: request.paragraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteParagraphs", "paragraphs", request.paragraphs) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "paragraphs", parameterValue: request.paragraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteParagraphsInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var request = deleteParagraphsRequest(name: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int"), paragraphs: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeletePortion() {
        let expectation = self.expectation(description: "testdeletePortion")
        let request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        TestUtils.initialize("deletePortion") { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidname() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deletePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidpath() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deletePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidportionIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidpassword() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deletePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidfolder() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deletePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionInvalidstorage() {
        let expectation = self.expectation(description: "testdeletePortion")
        var request = deletePortionRequest(name: TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deletePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deletePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeletePortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        TestUtils.initialize("deletePortions") { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidname() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deletePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidpath() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deletePortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidportions() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.portions = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "portions", value: request.portions as Any, type: "[Int]")
        TestUtils.initialize("deletePortions", "portions", request.portions) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "portions", parameterValue: request.portions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidpassword() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deletePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidfolder() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deletePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeletePortionsInvalidstorage() {
        let expectation = self.expectation(description: "testdeletePortions")
        var request = deletePortionsRequest(name: TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deletePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int"), portions: TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deletePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deletePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimation() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        let request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimation") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimation")
        var request = deleteSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        let request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalideffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationEffectInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationEffect")
        var request = deleteSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        let request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidsequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequence")
        var request = deleteSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "sequenceIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        let request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalideffectIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequenceEffectInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequenceEffect")
        var request = deleteSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        let request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequencesInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequencesInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequencesInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequencesInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationInteractiveSequencesInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationInteractiveSequences")
        var request = deleteSlideAnimationInteractiveSequencesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationInteractiveSequences", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationInteractiveSequences", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationInteractiveSequences(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationInteractiveSequences", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        let request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationMainSequenceInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationMainSequenceInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationMainSequenceInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationMainSequenceInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideAnimationMainSequenceInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideAnimationMainSequence")
        var request = deleteSlideAnimationMainSequenceRequest(name: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideAnimationMainSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideAnimationMainSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideAnimationMainSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideAnimationMainSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideByIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        let request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideByIndex") { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideByIndexInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideByIndexInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideByIndex", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideByIndexInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideByIndexInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideByIndexInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideByIndex")
        var request = deleteSlideByIndexRequest(name: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideByIndex", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideByIndex", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideByIndex", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideByIndex(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideByIndex", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideShape() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        let request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidpath() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidshapeIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapeInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideShape")
        var request = deleteSlideShapeRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlideShapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        let request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidpath() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidshapes() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.shapes = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "shapes", value: request.shapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSlideShapes", "shapes", request.shapes) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "shapes", parameterValue: request.shapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlideShapesInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlideShapes")
        var request = deleteSlideShapesRequest(name: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "path", type: "String"), shapes: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "shapes", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlidesCleanSlidesList() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        let request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesCleanSlidesList") { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesCleanSlidesListInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesCleanSlidesListInvalidslides() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.slides = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", value: request.slides as Any, type: "[Int]")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "slides", request.slides) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "slides", parameterValue: request.slides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesCleanSlidesListInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesCleanSlidesListInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesCleanSlidesListInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlidesCleanSlidesList")
        var request = deleteSlidesCleanSlidesListRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "name", type: "String"), slides: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "slides", type: "[Int]"), password: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesCleanSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesCleanSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesCleanSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesCleanSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        let request = deleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertiesInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = deleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertiesInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = deleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertiesInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = deleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertiesInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperties")
        var request = deleteSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        let request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertyInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertyInvalidpropertyName() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertyInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertyInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesDocumentPropertyInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlidesDocumentProperty")
        var request = deleteSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdeleteSlidesSlideBackground() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        let request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("deleteSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesSlideBackgroundInvalidname() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesSlideBackgroundInvalidslideIndex() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesSlideBackgroundInvalidpassword() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesSlideBackgroundInvalidfolder() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdeleteSlidesSlideBackgroundInvalidstorage() {
        let expectation = self.expectation(description: "testdeleteSlidesSlideBackground")
        var request = deleteSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "deleteSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("deleteSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.deleteSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testdownloadFile() {
        let expectation = self.expectation(description: "testdownloadFile")
        let request = downloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        TestUtils.initialize("downloadFile") { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdownloadFileInvalidpath() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = downloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("downloadFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdownloadFileInvalidstorageName() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = downloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("downloadFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testdownloadFileInvalidversionId() {
        let expectation = self.expectation(description: "testdownloadFile")
        var request = downloadFileRequest(path: TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("downloadFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.downloadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetDiscUsage() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let request = getDiscUsageRequest(storageName: TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String"))
        TestUtils.initialize("getDiscUsage") { (response, error) -> Void in
            SlidesAPI.getDiscUsage(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetDiscUsageInvalidstorageName() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        var request = getDiscUsageRequest(storageName: TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getDiscUsage", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getDiscUsage", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getDiscUsage(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDiscUsage", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetFileVersions() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let request = getFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        TestUtils.initialize("getFileVersions") { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetFileVersionsInvalidpath() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var request = getFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getFileVersions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetFileVersionsInvalidstorageName() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var request = getFileVersionsRequest(path: TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getFileVersions", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getFileVersions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetFilesList() {
        let expectation = self.expectation(description: "testgetFilesList")
        let request = getFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        TestUtils.initialize("getFilesList") { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetFilesListInvalidpath() {
        let expectation = self.expectation(description: "testgetFilesList")
        var request = getFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getFilesList", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetFilesListInvalidstorageName() {
        let expectation = self.expectation(description: "testgetFilesList")
        var request = getFilesListRequest(path: TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("getFilesList", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.getFilesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetLayoutSlide() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        TestUtils.initialize("getLayoutSlide") { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlideInvalidname() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getLayoutSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlideInvalidpassword() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlideInvalidfolder() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlideInvalidstorage() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var request = getLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetLayoutSlidesList() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        let request = getLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getLayoutSlidesList") { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlidesListInvalidname() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = getLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlidesListInvalidpassword() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = getLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlidesListInvalidfolder() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = getLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetLayoutSlidesListInvalidstorage() {
        let expectation = self.expectation(description: "testgetLayoutSlidesList")
        var request = getLayoutSlidesListRequest(name: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getLayoutSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getLayoutSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetMasterSlide() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        TestUtils.initialize("getMasterSlide") { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlideInvalidname() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getMasterSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlideInvalidpassword() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlideInvalidfolder() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlideInvalidstorage() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var request = getMasterSlideRequest(name: TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetMasterSlidesList() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        let request = getMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getMasterSlidesList") { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlidesListInvalidname() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = getMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlidesListInvalidpassword() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = getMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlidesListInvalidfolder() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = getMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetMasterSlidesListInvalidstorage() {
        let expectation = self.expectation(description: "testgetMasterSlidesList")
        var request = getMasterSlidesListRequest(name: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getMasterSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getMasterSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getMasterSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getMasterSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlide() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var request = getNotesSlideRequest(name: TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShape() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        let request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var request = getNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        let request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraph")
        var request = getNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        let request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapeParagraphsInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapeParagraphs")
        var request = getNotesSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        let request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidportionIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortion")
        var request = getNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShapePortions() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        let request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapePortions") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapePortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapePortionsInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapePortions")
        var request = getNotesSlideShapePortionsRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapePortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapePortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapePortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapePortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapePortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideShapes() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        let request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("getNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidpath() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideShapesInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var request = getNotesSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetNotesSlideWithFormat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        let request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        TestUtils.initialize("getNotesSlideWithFormat") { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidname() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidformat() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "format", request.format) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidwidth() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "width", request.width) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidheight() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("getNotesSlideWithFormat", "height", request.height) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidpassword() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidfolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidstorage() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetNotesSlideWithFormatInvalidfontsFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideWithFormat")
        var request = getNotesSlideWithFormatRequest(name: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideWithFormat", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideWithFormat", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideWithFormat", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetParagraphPortion() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        let request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        TestUtils.initialize("getParagraphPortion") { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidname() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidpath() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidportionIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidpassword() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidfolder() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionInvalidstorage() {
        let expectation = self.expectation(description: "testgetParagraphPortion")
        var request = getParagraphPortionRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "portionIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getParagraphPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getParagraphPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetParagraphPortions() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        let request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        TestUtils.initialize("getParagraphPortions") { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidname() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidpath() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphPortions", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidpassword() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidfolder() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetParagraphPortionsInvalidstorage() {
        let expectation = self.expectation(description: "testgetParagraphPortions")
        var request = getParagraphPortionsRequest(name: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getParagraphPortions", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getParagraphPortions", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getParagraphPortions", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getParagraphPortions(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphPortions", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlideAnimation() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        let request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("getSlideAnimation") { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidname() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideAnimation", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideAnimationInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlideAnimation")
        var request = getSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "slideIndex", type: "Int"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlideShape() {
        let expectation = self.expectation(description: "testgetSlideShape")
        let request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShape") { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidname() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidpath() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlideShape")
        var request = getSlideShapeRequest(name: TestUtils.getTestValue(functionName: "getSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShape", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlideShapeParagraph() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        let request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidname() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidpath() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraph")
        var request = getSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "paragraphIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlideShapeParagraphs() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        let request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidname() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidpath() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapeParagraphs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapeParagraphsInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlideShapeParagraphs")
        var request = getSlideShapeParagraphsRequest(name: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "shapeIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapeParagraphs", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapeParagraphs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapeParagraphs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapeParagraphs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapeParagraphs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlideShapes() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        let request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        TestUtils.initialize("getSlideShapes") { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidname() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideShapes", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidpath() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "path", request.path) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlideShapesInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlideShapes")
        var request = getSlideShapesRequest(name: TestUtils.getTestValue(functionName: "getSlideShapes", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlideShapes", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "getSlideShapes", name: "path", type: "String"), password: TestUtils.getTestValue(functionName: "getSlideShapes", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlideShapes", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlideShapes", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlideShapes", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlideShapes", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlideShapes(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideShapes", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesApiInfo() {
        let expectation = self.expectation(description: "testgetSlidesApiInfo")
        TestUtils.initialize("getSlidesApiInfo") { (response, error) -> Void in
            SlidesAPI.getSlidesApiInfo() { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesDocument() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        let request = getSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        TestUtils.initialize("getSlidesDocument") { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = getSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = getSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = getSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesDocument")
        var request = getSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocument", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocument", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocument", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocument", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesDocumentProperties() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        let request = getSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesDocumentProperties") { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertiesInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = getSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertiesInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = getSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertiesInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = getSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertiesInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperties")
        var request = getSlidesDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesDocumentProperty() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        let request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesDocumentProperty") { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertyInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertyInvalidpropertyName() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertyInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertyInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesDocumentPropertyInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesDocumentProperty")
        var request = getSlidesDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "propertyName", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesImageWithDefaultFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        let request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImageWithDefaultFormat") { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithDefaultFormatInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithDefaultFormatInvalidindex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.index = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", value: request.index as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "index", request.index) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "index", parameterValue: request.index as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithDefaultFormatInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithDefaultFormatInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithDefaultFormatInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithDefaultFormat")
        var request = getSlidesImageWithDefaultFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "index", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithDefaultFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithDefaultFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithDefaultFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithDefaultFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesImageWithFormat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        let request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImageWithFormat") { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidindex() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.index = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "index", value: request.index as Any, type: "Int")
        TestUtils.initialize("getSlidesImageWithFormat", "index", request.index) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "index", parameterValue: request.index as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidformat() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "format", request.format) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImageWithFormatInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesImageWithFormat")
        var request = getSlidesImageWithFormatRequest(name: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "name", type: "String"), index: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "index", type: "Int"), format: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "format", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImageWithFormat", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImageWithFormat", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImageWithFormat", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImageWithFormat(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImageWithFormat", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesImages() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        let request = getSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesImages") { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImagesInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = getSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImagesInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = getSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImagesInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = getSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesImagesInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesImages")
        var request = getSlidesImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesImages", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesImages", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesImages", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesImages", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesImages", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesPlaceholder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        let request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPlaceholder") { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidplaceholderIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.placeholderIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", value: request.placeholderIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholder", "placeholderIndex", request.placeholderIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "placeholderIndex", parameterValue: request.placeholderIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholderInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholder")
        var request = getSlidesPlaceholderRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "slideIndex", type: "Int"), placeholderIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "placeholderIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholder", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholder", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholder", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholder", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesPlaceholders() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        let request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPlaceholders") { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholdersInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholdersInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesPlaceholders", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholdersInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholdersInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPlaceholdersInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesPlaceholders")
        var request = getSlidesPlaceholdersRequest(name: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPlaceholders", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPlaceholders", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPlaceholders", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPlaceholders(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPlaceholders", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesPresentationTextItems() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        let request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesPresentationTextItems") { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPresentationTextItemsInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPresentationTextItemsInvalidwithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.withEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", value: request.withEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesPresentationTextItems", "withEmpty", request.withEmpty) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "withEmpty", parameterValue: request.withEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPresentationTextItemsInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPresentationTextItemsInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesPresentationTextItemsInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesPresentationTextItems")
        var request = getSlidesPresentationTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "name", type: "String"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesPresentationTextItems", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesPresentationTextItems", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesPresentationTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesPresentationTextItems", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlide() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        let request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlide") { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlide")
        var request = getSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlideBackground() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        let request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideBackgroundInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideBackgroundInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideBackgroundInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideBackgroundInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideBackgroundInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideBackground")
        var request = getSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlideComments() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        let request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideComments") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideCommentsInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideCommentsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideComments", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideCommentsInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideCommentsInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideCommentsInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideComments")
        var request = getSlidesSlideCommentsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideComments", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideComments", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideComments", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideComments(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideComments", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlideImages() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        let request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideImages") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideImagesInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideImagesInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideImages", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideImagesInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideImagesInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideImagesInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideImages")
        var request = getSlidesSlideImagesRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideImages", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideImages", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideImages", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideImages(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideImages", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlideTextItems() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        let request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlideTextItems") { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesSlideTextItems", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidwithEmpty() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.withEmpty = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", value: request.withEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlidesSlideTextItems", "withEmpty", request.withEmpty) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "withEmpty", parameterValue: request.withEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlideTextItemsInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlideTextItems")
        var request = getSlidesSlideTextItemsRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "slideIndex", type: "Int"), withEmpty: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "withEmpty", type: "Bool"), password: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlideTextItems", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlideTextItems", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlideTextItems", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlideTextItems(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlideTextItems", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesSlidesList() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        let request = getSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesSlidesList") { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlidesListInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = getSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlidesListInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = getSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlidesListInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = getSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesSlidesListInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesSlidesList")
        var request = getSlidesSlidesListRequest(name: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesSlidesList", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesSlidesList", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesSlidesList", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesSlidesList(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesSlidesList", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesTheme() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        let request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesTheme") { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesTheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesTheme")
        var request = getSlidesThemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesTheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesTheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesTheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesTheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesTheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesThemeColorScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        let request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeColorScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeColorSchemeInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeColorSchemeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeColorScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeColorSchemeInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeColorSchemeInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeColorSchemeInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeColorScheme")
        var request = getSlidesThemeColorSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeColorScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeColorScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeColorScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeColorScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesThemeFontScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        let request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeFontScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFontSchemeInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFontSchemeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFontScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFontSchemeInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFontSchemeInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFontSchemeInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFontScheme")
        var request = getSlidesThemeFontSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFontScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFontScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFontScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFontScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testgetSlidesThemeFormatScheme() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        let request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        TestUtils.initialize("getSlidesThemeFormatScheme") { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFormatSchemeInvalidname() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "name", request.name) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFormatSchemeInvalidslideIndex() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("getSlidesThemeFormatScheme", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFormatSchemeInvalidpassword() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "password", request.password) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFormatSchemeInvalidfolder() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testgetSlidesThemeFormatSchemeInvalidstorage() {
        let expectation = self.expectation(description: "testgetSlidesThemeFormatScheme")
        var request = getSlidesThemeFormatSchemeRequest(name: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "slideIndex", type: "Int"), password: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "getSlidesThemeFormatScheme", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("getSlidesThemeFormatScheme", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.getSlidesThemeFormatScheme(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlidesThemeFormatScheme", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testmoveFile() {
        let expectation = self.expectation(description: "testmoveFile")
        let request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        TestUtils.initialize("moveFile") { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFileInvalidsrcPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("moveFile", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFileInvaliddestPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("moveFile", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFileInvalidsrcStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFileInvaliddestStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFileInvalidversionId() {
        let expectation = self.expectation(description: "testmoveFile")
        var request = moveFileRequest(srcPath: TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("moveFile", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.moveFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testmoveFolder() {
        let expectation = self.expectation(description: "testmoveFolder")
        let request = moveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        TestUtils.initialize("moveFolder") { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFolderInvalidsrcPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = moveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.srcPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcPath", value: request.srcPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcPath", request.srcPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcPath", parameterValue: request.srcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFolderInvaliddestPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = moveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.destPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destPath", value: request.destPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "destPath", request.destPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destPath", parameterValue: request.destPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFolderInvalidsrcStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = moveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.srcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcStorageName", value: request.srcStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcStorageName", request.srcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcStorageName", parameterValue: request.srcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testmoveFolderInvaliddestStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var request = moveFolderRequest(srcPath: TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String"), destPath: TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String"), srcStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String"), destStorageName: TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String"))
        request.destStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destStorageName", value: request.destStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "destStorageName", request.destStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destStorageName", parameterValue: request.destStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testobjectExists() {
        let expectation = self.expectation(description: "testobjectExists")
        let request = objectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        TestUtils.initialize("objectExists") { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testobjectExistsInvalidpath() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = objectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("objectExists", "path", request.path) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testobjectExistsInvalidstorageName() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = objectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("objectExists", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testobjectExistsInvalidversionId() {
        let expectation = self.expectation(description: "testobjectExists")
        var request = objectExistsRequest(path: TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String"), storageName: TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String"), versionId: TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String"))
        request.versionId = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "versionId", value: request.versionId as Any, type: "String")
        TestUtils.initialize("objectExists", "versionId", request.versionId) { (response, error) -> Void in
            SlidesAPI.objectExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "versionId", parameterValue: request.versionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostAddNewParagraph() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        let request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidname() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidpath() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvaliddto() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("postAddNewParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewParagraphInvalidposition() {
        let expectation = self.expectation(description: "testpostAddNewParagraph")
        var request = postAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewParagraph", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewParagraph", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewParagraph", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewParagraph", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostAddNewPortion() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        let request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewPortion") { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidname() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidpath() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvaliddto() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("postAddNewPortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidpassword() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidfolder() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidstorage() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewPortionInvalidposition() {
        let expectation = self.expectation(description: "testpostAddNewPortion")
        var request = postAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postAddNewPortion", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewPortion", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewPortion", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewPortion", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostAddNewShape() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        let request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        TestUtils.initialize("postAddNewShape") { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidname() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidpath() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvaliddto() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("postAddNewShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidpassword() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidfolder() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidstorage() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNewShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidshapeToClone() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.shapeToClone = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "shapeToClone", value: request.shapeToClone as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "shapeToClone", request.shapeToClone) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "shapeToClone", parameterValue: request.shapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNewShapeInvalidposition() {
        let expectation = self.expectation(description: "testpostAddNewShape")
        var request = postAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postAddNewShape", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postAddNewShape", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postAddNewShape", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNewShape", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostAddNotesSlide() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        let request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("postAddNotesSlide") { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvalidname() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postAddNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvaliddto() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "dto", value: request.dto as Any, type: "NotesSlide")
        TestUtils.initialize("postAddNotesSlide", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostAddNotesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testpostAddNotesSlide")
        var request = postAddNotesSlideRequest(name: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postAddNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postAddNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postAddNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postAddNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postAddNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostCopyLayoutSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        let request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidname() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFrom() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", value: request.cloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", request.cloneFrom) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: request.cloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", value: request.cloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", request.cloneFromPosition) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: request.cloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", value: request.cloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", request.cloneFromPassword) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: request.cloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidcloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", value: request.cloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", request.cloneFromStorage) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: request.cloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidpassword() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidfolder() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyLayoutSlideFromSourcePresentationInvalidstorage() {
        let expectation = self.expectation(description: "testpostCopyLayoutSlideFromSourcePresentation")
        var request = postCopyLayoutSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postCopyLayoutSlideFromSourcePresentation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postCopyLayoutSlideFromSourcePresentation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postCopyLayoutSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyLayoutSlideFromSourcePresentation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostCopyMasterSlideFromSourcePresentation() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        let request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation") { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidname() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidcloneFrom() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFrom = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", value: request.cloneFrom as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", request.cloneFrom) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFrom", parameterValue: request.cloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPosition() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPosition = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", value: request.cloneFromPosition as Any, type: "Int")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", request.cloneFromPosition) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPosition", parameterValue: request.cloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromPassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromPassword = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", value: request.cloneFromPassword as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", request.cloneFromPassword) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromPassword", parameterValue: request.cloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidcloneFromStorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.cloneFromStorage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", value: request.cloneFromStorage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", request.cloneFromStorage) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "cloneFromStorage", parameterValue: request.cloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidapplyToAll() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.applyToAll = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", value: request.applyToAll as Any, type: "Bool")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", request.applyToAll) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "applyToAll", parameterValue: request.applyToAll as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidpassword() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidfolder() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostCopyMasterSlideFromSourcePresentationInvalidstorage() {
        let expectation = self.expectation(description: "testpostCopyMasterSlideFromSourcePresentation")
        var request = postCopyMasterSlideFromSourcePresentationRequest(name: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "name", type: "String"), cloneFrom: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFrom", type: "String"), cloneFromPosition: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPosition", type: "Int"), cloneFromPassword: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromPassword", type: "String"), cloneFromStorage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "cloneFromStorage", type: "String"), applyToAll: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "applyToAll", type: "Bool"), password: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postCopyMasterSlideFromSourcePresentation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postCopyMasterSlideFromSourcePresentation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postCopyMasterSlideFromSourcePresentation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postCopyMasterSlideFromSourcePresentation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostNotesSlideAddNewParagraph() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        let request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewParagraph") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidname() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidpath() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvaliddto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewParagraphInvalidposition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewParagraph")
        var request = postNotesSlideAddNewParagraphRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewParagraph", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewParagraph", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewParagraph", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostNotesSlideAddNewPortion() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        let request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewPortion") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidname() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidpath() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvaliddto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("postNotesSlideAddNewPortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidpassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidfolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidstorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewPortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewPortionInvalidposition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewPortion")
        var request = postNotesSlideAddNewPortionRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "storage", type: "String"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewPortion", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewPortion", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewPortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewPortion", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostNotesSlideAddNewShape() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        let request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        TestUtils.initialize("postNotesSlideAddNewShape") { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidname() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidpath() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvaliddto() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("postNotesSlideAddNewShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidpassword() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidfolder() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidstorage() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideAddNewShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidshapeToClone() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.shapeToClone = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", value: request.shapeToClone as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "shapeToClone", request.shapeToClone) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "shapeToClone", parameterValue: request.shapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideAddNewShapeInvalidposition() {
        let expectation = self.expectation(description: "testpostNotesSlideAddNewShape")
        var request = postNotesSlideAddNewShapeRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "path", type: "String"), dto: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "storage", type: "String"), shapeToClone: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "shapeToClone", type: "Int"), position: TestUtils.getTestValue(functionName: "postNotesSlideAddNewShape", name: "position", type: "Int"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postNotesSlideAddNewShape", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postNotesSlideAddNewShape", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postNotesSlideAddNewShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideAddNewShape", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        let request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidname() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidpath() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidscaleX() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidscaleY() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidbounds() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostNotesSlideShapeSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostNotesSlideShapeSaveAs")
        var request = postNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postNotesSlideShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postNotesSlideShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostPresentationMerge() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        let request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        TestUtils.initialize("postPresentationMerge") { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostPresentationMergeInvalidname() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostPresentationMergeInvalidrequest() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.request = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "request", value: request.request as Any, type: "PresentationsMergeRequest")
        TestUtils.initialize("postPresentationMerge", "request", request.request) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "request", parameterValue: request.request as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostPresentationMergeInvalidpassword() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostPresentationMergeInvalidstorage() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostPresentationMergeInvalidfolder() {
        let expectation = self.expectation(description: "testpostPresentationMerge")
        var request = postPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "request", type: "PresentationsMergeRequest"), password: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postPresentationMerge", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postPresentationMerge", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postPresentationMerge", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postPresentationMerge", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostShapeSaveAs() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        let request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidname() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidpath() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("postShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("postShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidscaleX() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidscaleY() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("postShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidbounds() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostShapeSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostShapeSaveAs")
        var request = postShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlideAnimationEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        let request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalidname() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalideffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationEffectInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationEffect")
        var request = postSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "slideIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlideAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        let request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidname() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidsequence() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.sequence = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", value: request.sequence as Any, type: "InteractiveSequence")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "sequence", request.sequence) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "sequence", parameterValue: request.sequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequence")
        var request = postSlideAnimationInteractiveSequenceRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "slideIndex", type: "Int"), sequence: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequence", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequence", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequence(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequence", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        let request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidname() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalideffect() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideAnimationInteractiveSequenceEffectInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlideAnimationInteractiveSequenceEffect")
        var request = postSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlideSaveAs() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        let request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidname() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlideSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidwidth() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "width", request.width) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidheight() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("postSlideSaveAs", "height", request.height) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlideSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostSlideSaveAs")
        var request = postSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlideSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlideSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlideSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesAdd() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        let request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        TestUtils.initialize("postSlidesAdd") { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidposition() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postSlidesAdd", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesAddInvalidlayoutAlias() {
        let expectation = self.expectation(description: "testpostSlidesAdd")
        var request = postSlidesAddRequest(name: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "name", type: "String"), position: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "position", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "storage", type: "String"), layoutAlias: TestUtils.getTestValue(functionName: "postSlidesAdd", name: "layoutAlias", type: "String"))
        request.layoutAlias = TestUtils.getInvalidTestValue(functionName: "postSlidesAdd", name: "layoutAlias", value: request.layoutAlias as Any, type: "String")
        TestUtils.initialize("postSlidesAdd", "layoutAlias", request.layoutAlias) { (response, error) -> Void in
            SlidesAPI.postSlidesAdd(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesAdd", parameterName: "layoutAlias", parameterValue: request.layoutAlias as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesConvert() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        let request = postSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesConvert") { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesConvertInvalidformat() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = postSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesConvertInvaliddocument() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = postSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("postSlidesConvert", "document", request.document) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesConvertInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = postSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesConvertInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesConvert")
        var request = postSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "format", type: "String"), document: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesConvert", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesConvert", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesConvert", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesConvert", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        let request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesCopy") { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidslideToCopy() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.slideToCopy = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "slideToCopy", value: request.slideToCopy as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "slideToCopy", request.slideToCopy) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "slideToCopy", parameterValue: request.slideToCopy as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidposition() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.position = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "position", value: request.position as Any, type: "Int")
        TestUtils.initialize("postSlidesCopy", "position", request.position) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "position", parameterValue: request.position as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidsource() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.source = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "source", value: request.source as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "source", request.source) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "source", parameterValue: request.source as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidsourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.sourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourcePassword", value: request.sourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourcePassword", request.sourcePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourcePassword", parameterValue: request.sourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidsourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.sourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "sourceStorage", value: request.sourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "sourceStorage", request.sourceStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "sourceStorage", parameterValue: request.sourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesCopyInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesCopy")
        var request = postSlidesCopyRequest(name: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "name", type: "String"), slideToCopy: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "slideToCopy", type: "Int"), position: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "position", type: "Int"), source: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "source", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesCopy", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesCopy", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesCopy", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesCopy(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesCopy", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesDocument() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        let request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocument") { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvaliddata() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.data = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "data", value: request.data as Any, type: "Data")
        TestUtils.initialize("postSlidesDocument", "data", request.data) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "data", parameterValue: request.data as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvalidinputPassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.inputPassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "inputPassword", value: request.inputPassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "inputPassword", request.inputPassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "inputPassword", parameterValue: request.inputPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesDocument")
        var request = postSlidesDocumentRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "name", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "data", type: "Data"), inputPassword: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "inputPassword", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocument", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocument", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocument", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocument(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocument", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        let request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromHtmlInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromHtmlInvalidhtml() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.html = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", value: request.html as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "html", request.html) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "html", parameterValue: request.html as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromHtmlInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromHtmlInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromHtmlInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromHtml")
        var request = postSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromHtml", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromHtml", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromHtml", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesDocumentFromSource() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        let request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromSource") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidsourcePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourcePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", value: request.sourcePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePath", request.sourcePath) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePath", parameterValue: request.sourcePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidsourcePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourcePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", value: request.sourcePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourcePassword", request.sourcePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourcePassword", parameterValue: request.sourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidsourceStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.sourceStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", value: request.sourceStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "sourceStorage", request.sourceStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "sourceStorage", parameterValue: request.sourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromSourceInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromSource")
        var request = postSlidesDocumentFromSourceRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "name", type: "String"), sourcePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePath", type: "String"), sourcePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourcePassword", type: "String"), sourceStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "sourceStorage", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromSource", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromSource", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromSource(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromSource", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesDocumentFromTemplate() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        let request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        TestUtils.initialize("postSlidesDocumentFromTemplate") { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidtemplatePath() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templatePath = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", value: request.templatePath as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePath", request.templatePath) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePath", parameterValue: request.templatePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvaliddata() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.data = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", value: request.data as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "data", request.data) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "data", parameterValue: request.data as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidtemplatePassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templatePassword = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", value: request.templatePassword as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templatePassword", request.templatePassword) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templatePassword", parameterValue: request.templatePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidtemplateStorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.templateStorage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", value: request.templateStorage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "templateStorage", request.templateStorage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "templateStorage", parameterValue: request.templateStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidisImageDataEmbedded() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.isImageDataEmbedded = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", value: request.isImageDataEmbedded as Any, type: "Bool")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", request.isImageDataEmbedded) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "isImageDataEmbedded", parameterValue: request.isImageDataEmbedded as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesDocumentFromTemplateInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesDocumentFromTemplate")
        var request = postSlidesDocumentFromTemplateRequest(name: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "name", type: "String"), templatePath: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePath", type: "String"), data: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "data", type: "String"), templatePassword: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templatePassword", type: "String"), templateStorage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "templateStorage", type: "String"), isImageDataEmbedded: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "isImageDataEmbedded", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesDocumentFromTemplate", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesDocumentFromTemplate", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesDocumentFromTemplate(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesDocumentFromTemplate", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesPipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        let request = postSlidesPipelineRequest(pipeline: TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline"))
        TestUtils.initialize("postSlidesPipeline") { (response, error) -> Void in
            SlidesAPI.postSlidesPipeline(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPipelineInvalidpipeline() {
        let expectation = self.expectation(description: "testpostSlidesPipeline")
        var request = postSlidesPipelineRequest(pipeline: TestUtils.getTestValue(functionName: "postSlidesPipeline", name: "pipeline", type: "Pipeline"))
        request.pipeline = TestUtils.getInvalidTestValue(functionName: "postSlidesPipeline", name: "pipeline", value: request.pipeline as Any, type: "Pipeline")
        TestUtils.initialize("postSlidesPipeline", "pipeline", request.pipeline) { (response, error) -> Void in
            SlidesAPI.postSlidesPipeline(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPipeline", parameterName: "pipeline", parameterValue: request.pipeline as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesPresentationReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        let request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesPresentationReplaceText") { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidoldValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.oldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", value: request.oldValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "oldValue", request.oldValue) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "oldValue", parameterValue: request.oldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidnewValue() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.newValue = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", value: request.newValue as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "newValue", request.newValue) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "newValue", parameterValue: request.newValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidignoreCase() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.ignoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", value: request.ignoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesPresentationReplaceText", "ignoreCase", request.ignoreCase) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "ignoreCase", parameterValue: request.ignoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesPresentationReplaceTextInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesPresentationReplaceText")
        var request = postSlidesPresentationReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "name", type: "String"), oldValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesPresentationReplaceText", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesPresentationReplaceText", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesPresentationReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesPresentationReplaceText", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesReorder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        let request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesReorder") { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidnewPosition() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.newPosition = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "newPosition", value: request.newPosition as Any, type: "Int")
        TestUtils.initialize("postSlidesReorder", "newPosition", request.newPosition) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "newPosition", parameterValue: request.newPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesReorder")
        var request = postSlidesReorderRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "slideIndex", type: "Int"), newPosition: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "newPosition", type: "Int"), password: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorder", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorder", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesReorder", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesReorder(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorder", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesReorderMany() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        let request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesReorderMany") { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidoldPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.oldPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", value: request.oldPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "oldPositions", request.oldPositions) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "oldPositions", parameterValue: request.oldPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidnewPositions() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.newPositions = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "newPositions", value: request.newPositions as Any, type: "[Int]")
        TestUtils.initialize("postSlidesReorderMany", "newPositions", request.newPositions) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "newPositions", parameterValue: request.newPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesReorderManyInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesReorderMany")
        var request = postSlidesReorderManyRequest(name: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "name", type: "String"), oldPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "oldPositions", type: "[Int]"), newPositions: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "newPositions", type: "[Int]"), password: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesReorderMany", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesReorderMany", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesReorderMany", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesReorderMany(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesReorderMany", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesSaveAs() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        let request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSaveAs")
        var request = postSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "name", type: "String"), format: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesSetDocumentProperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        let request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesSetDocumentProperties") { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSetDocumentPropertiesInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSetDocumentPropertiesInvalidproperties() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.properties = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", value: request.properties as Any, type: "DocumentProperties")
        TestUtils.initialize("postSlidesSetDocumentProperties", "properties", request.properties) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "properties", parameterValue: request.properties as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSetDocumentPropertiesInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSetDocumentPropertiesInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSetDocumentPropertiesInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesSetDocumentProperties")
        var request = postSlidesSetDocumentPropertiesRequest(name: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "name", type: "String"), properties: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "properties", type: "DocumentProperties"), password: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSetDocumentProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSetDocumentProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSetDocumentProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSetDocumentProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesSlideReplaceText() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        let request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        TestUtils.initialize("postSlidesSlideReplaceText") { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidslideIndex() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("postSlidesSlideReplaceText", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidoldValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.oldValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", value: request.oldValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "oldValue", request.oldValue) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "oldValue", parameterValue: request.oldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidnewValue() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.newValue = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", value: request.newValue as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "newValue", request.newValue) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "newValue", parameterValue: request.newValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidignoreCase() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.ignoreCase = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", value: request.ignoreCase as Any, type: "Bool")
        TestUtils.initialize("postSlidesSlideReplaceText", "ignoreCase", request.ignoreCase) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "ignoreCase", parameterValue: request.ignoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSlideReplaceTextInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesSlideReplaceText")
        var request = postSlidesSlideReplaceTextRequest(name: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "slideIndex", type: "Int"), oldValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "oldValue", type: "String"), newValue: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "newValue", type: "String"), ignoreCase: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "ignoreCase", type: "Bool"), password: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSlideReplaceText", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSlideReplaceText", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSlideReplaceText(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSlideReplaceText", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testpostSlidesSplit() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        let request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        TestUtils.initialize("postSlidesSplit") { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidname() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "name", request.name) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidoptions() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("postSlidesSplit", "options", request.options) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidformat() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "format", request.format) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidwidth() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "width", request.width) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidheight() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "height", request.height) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidto() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.to = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "to", value: request.to as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "to", request.to) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "to", parameterValue: request.to as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidfrom() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.from = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "from", value: request.from as Any, type: "Int")
        TestUtils.initialize("postSlidesSplit", "from", request.from) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "from", parameterValue: request.from as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvaliddestFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.destFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "destFolder", value: request.destFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "destFolder", request.destFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "destFolder", parameterValue: request.destFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidpassword() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "password", request.password) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidstorage() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidfolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testpostSlidesSplitInvalidfontsFolder() {
        let expectation = self.expectation(description: "testpostSlidesSplit")
        var request = postSlidesSplitRequest(name: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "name", type: "String"), options: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "options", type: "ExportOptions"), format: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "format", type: "String"), width: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "height", type: "Int"), to: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "to", type: "Int"), from: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "from", type: "Int"), destFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "destFolder", type: "String"), password: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "postSlidesSplit", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "postSlidesSplit", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("postSlidesSplit", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.postSlidesSplit(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "postSlidesSplit", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputLayoutSlide() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        let request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        TestUtils.initialize("putLayoutSlide") { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidname() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putLayoutSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidslideDto() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.slideDto = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "slideDto", value: request.slideDto as Any, type: "LayoutSlide")
        TestUtils.initialize("putLayoutSlide", "slideDto", request.slideDto) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "slideDto", parameterValue: request.slideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidpassword() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidfolder() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputLayoutSlideInvalidstorage() {
        let expectation = self.expectation(description: "testputLayoutSlide")
        var request = putLayoutSlideRequest(name: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "slideDto", type: "LayoutSlide"), password: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putLayoutSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putLayoutSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putLayoutSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putLayoutSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putLayoutSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputNotesSlideShapeSaveAs() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        let request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putNotesSlideShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidname() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidpath() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidoutPath() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidscaleX() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidscaleY() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidbounds() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputNotesSlideShapeSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testputNotesSlideShapeSaveAs")
        var request = putNotesSlideShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putNotesSlideShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putNotesSlideShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putNotesSlideShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putNotesSlideShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputPresentationMerge() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        let request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        TestUtils.initialize("putPresentationMerge") { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputPresentationMergeInvalidname() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputPresentationMergeInvalidrequest() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.request = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "request", value: request.request as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("putPresentationMerge", "request", request.request) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "request", parameterValue: request.request as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputPresentationMergeInvalidpassword() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputPresentationMergeInvalidstorage() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputPresentationMergeInvalidfolder() {
        let expectation = self.expectation(description: "testputPresentationMerge")
        var request = putPresentationMergeRequest(name: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "name", type: "String"), request: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "request", type: "OrderedMergeRequest"), password: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putPresentationMerge", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putPresentationMerge", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putPresentationMerge", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putPresentationMerge(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putPresentationMerge", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSetParagraphPortionProperties() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        let request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetParagraphPortionProperties") { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidname() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidpath() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidportionIndex() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphPortionProperties", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvaliddto() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("putSetParagraphPortionProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidpassword() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidfolder() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPortionPropertiesInvalidstorage() {
        let expectation = self.expectation(description: "testputSetParagraphPortionProperties")
        var request = putSetParagraphPortionPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphPortionProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetParagraphPortionProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetParagraphPortionProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphPortionProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSetParagraphProperties() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        let request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        TestUtils.initialize("putSetParagraphProperties") { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidname() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidpath() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putSetParagraphProperties", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvaliddto() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("putSetParagraphProperties", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidpassword() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidfolder() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSetParagraphPropertiesInvalidstorage() {
        let expectation = self.expectation(description: "testputSetParagraphProperties")
        var request = putSetParagraphPropertiesRequest(name: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSetParagraphProperties", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSetParagraphProperties", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSetParagraphProperties", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSetParagraphProperties(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSetParagraphProperties", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputShapeSaveAs() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        let request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putShapeSaveAs") { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidname() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidpath() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putShapeSaveAs", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidoutPath() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "options", value: request.options as Any, type: "IShapeExportOptions")
        TestUtils.initialize("putShapeSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidscaleX() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleX = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleX", value: request.scaleX as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleX", request.scaleX) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleX", parameterValue: request.scaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidscaleY() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.scaleY = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "scaleY", value: request.scaleY as Any, type: "Double")
        TestUtils.initialize("putShapeSaveAs", "scaleY", request.scaleY) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "scaleY", parameterValue: request.scaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidbounds() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.bounds = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "bounds", value: request.bounds as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "bounds", request.bounds) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "bounds", parameterValue: request.bounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputShapeSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testputShapeSaveAs")
        var request = putShapeSaveAsRequest(name: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "shapeIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "options", type: "IShapeExportOptions"), password: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "storage", type: "String"), scaleX: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleX", type: "Double"), scaleY: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "scaleY", type: "Double"), bounds: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "bounds", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putShapeSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putShapeSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putShapeSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putShapeSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlideAnimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        let request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimation") { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidname() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimation", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidanimation() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.animation = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "animation", value: request.animation as Any, type: "SlideAnimation")
        TestUtils.initialize("putSlideAnimation", "animation", request.animation) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "animation", parameterValue: request.animation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidpassword() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidfolder() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInvalidstorage() {
        let expectation = self.expectation(description: "testputSlideAnimation")
        var request = putSlideAnimationRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "slideIndex", type: "Int"), animation: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "animation", type: "SlideAnimation"), password: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimation", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimation", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimation", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimation(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimation", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlideAnimationEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        let request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimationEffect") { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalidname() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalideffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalideffect() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalidpassword() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalidfolder() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationEffectInvalidstorage() {
        let expectation = self.expectation(description: "testputSlideAnimationEffect")
        var request = putSlideAnimationEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "slideIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlideAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        let request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidname() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.sequenceIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: request.sequenceIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", request.sequenceIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: request.sequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalideffectIndex() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effectIndex = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", value: request.effectIndex as Any, type: "Int")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", request.effectIndex) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: request.effectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalideffect() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.effect = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", value: request.effect as Any, type: "Effect")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "effect", request.effect) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: request.effect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidpassword() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidfolder() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideAnimationInteractiveSequenceEffectInvalidstorage() {
        let expectation = self.expectation(description: "testputSlideAnimationInteractiveSequenceEffect")
        var request = putSlideAnimationInteractiveSequenceEffectRequest(name: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int"), sequenceIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int"), effectIndex: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int"), effect: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "effect", type: "Effect"), password: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideAnimationInteractiveSequenceEffect", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideAnimationInteractiveSequenceEffect", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideAnimationInteractiveSequenceEffect(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlideSaveAs() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        let request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlideSaveAs") { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidname() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidoutPath() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("putSlideSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidwidth() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "width", request.width) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidheight() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("putSlideSaveAs", "height", request.height) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testputSlideSaveAs")
        var request = putSlideSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "slideIndex", type: "Int"), format: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "outPath", type: "String"), options: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "options", type: "ExportOptions"), width: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "height", type: "Int"), password: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "storage", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlideSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlideSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlideSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlideShapeInfo() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        let request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        TestUtils.initialize("putSlideShapeInfo") { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidname() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidpath() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putSlideShapeInfo", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvaliddto() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("putSlideShapeInfo", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidpassword() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidfolder() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlideShapeInfoInvalidstorage() {
        let expectation = self.expectation(description: "testputSlideShapeInfo")
        var request = putSlideShapeInfoRequest(name: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlideShapeInfo", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlideShapeInfo", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlideShapeInfo", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlideShapeInfo(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlideShapeInfo", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesConvert() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        let request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlidesConvert") { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesConvertInvalidformat() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesConvertInvalidoutPath() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesConvertInvaliddocument() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.document = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "document", value: request.document as Any, type: "Data")
        TestUtils.initialize("putSlidesConvert", "document", request.document) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "document", parameterValue: request.document as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesConvertInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesConvertInvalidfontsFolder() {
        let expectation = self.expectation(description: "testputSlidesConvert")
        var request = putSlidesConvertRequest(format: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "format", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "outPath", type: "String"), document: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "document", type: "Data"), password: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "password", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesConvert", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesConvert", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesConvert", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesConvert(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesConvert", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesDocumentFromHtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        let request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        TestUtils.initialize("putSlidesDocumentFromHtml") { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesDocumentFromHtmlInvalidname() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesDocumentFromHtmlInvalidhtml() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.html = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", value: request.html as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "html", request.html) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "html", parameterValue: request.html as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesDocumentFromHtmlInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesDocumentFromHtmlInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesDocumentFromHtmlInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesDocumentFromHtml")
        var request = putSlidesDocumentFromHtmlRequest(name: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "name", type: "String"), html: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "html", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesDocumentFromHtml", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesDocumentFromHtml", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesDocumentFromHtml(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesDocumentFromHtml", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSaveAs() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        let request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        TestUtils.initialize("putSlidesSaveAs") { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidoutPath() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.outPath = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "outPath", value: request.outPath as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "outPath", request.outPath) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "outPath", parameterValue: request.outPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidformat() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.format = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "format", value: request.format as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "format", request.format) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "format", parameterValue: request.format as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidoptions() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.options = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "options", value: request.options as Any, type: "ExportOptions")
        TestUtils.initialize("putSlidesSaveAs", "options", request.options) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "options", parameterValue: request.options as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSaveAsInvalidfontsFolder() {
        let expectation = self.expectation(description: "testputSlidesSaveAs")
        var request = putSlidesSaveAsRequest(name: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "name", type: "String"), outPath: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "outPath", type: "String"), format: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "format", type: "String"), options: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "options", type: "ExportOptions"), password: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "folder", type: "String"), fontsFolder: TestUtils.getTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", type: "String"))
        request.fontsFolder = TestUtils.getInvalidTestValue(functionName: "putSlidesSaveAs", name: "fontsFolder", value: request.fontsFolder as Any, type: "String")
        TestUtils.initialize("putSlidesSaveAs", "fontsFolder", request.fontsFolder) { (response, error) -> Void in
            SlidesAPI.putSlidesSaveAs(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSaveAs", parameterName: "fontsFolder", parameterValue: request.fontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSetDocumentProperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        let request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSetDocumentProperty") { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidpropertyName() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.propertyName = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", value: request.propertyName as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "propertyName", request.propertyName) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "propertyName", parameterValue: request.propertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidproperty() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.property = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", value: request.property as Any, type: "DocumentProperty")
        TestUtils.initialize("putSlidesSetDocumentProperty", "property", request.property) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "property", parameterValue: request.property as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSetDocumentPropertyInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSetDocumentProperty")
        var request = putSlidesSetDocumentPropertyRequest(name: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "name", type: "String"), propertyName: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "propertyName", type: "String"), property: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "property", type: "DocumentProperty"), password: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSetDocumentProperty", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSetDocumentProperty", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSetDocumentProperty(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSetDocumentProperty", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSlide() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        let request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlide") { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidslideDto() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.slideDto = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "slideDto", value: request.slideDto as Any, type: "Slide")
        TestUtils.initialize("putSlidesSlide", "slideDto", request.slideDto) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "slideDto", parameterValue: request.slideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSlide")
        var request = putSlidesSlideRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideIndex", type: "Int"), slideDto: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "slideDto", type: "Slide"), password: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSlideBackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        let request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlideBackground") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackground", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidbackground() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.background = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "background", value: request.background as Any, type: "SlideBackground")
        TestUtils.initialize("putSlidesSlideBackground", "background", request.background) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "background", parameterValue: request.background as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackground")
        var request = putSlidesSlideBackgroundRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "slideIndex", type: "Int"), background: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "background", type: "SlideBackground"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackground", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackground", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackground", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackground(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackground", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSlideBackgroundColor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        let request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        TestUtils.initialize("putSlidesSlideBackgroundColor") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidslideIndex() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidcolor() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.color = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", value: request.color as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "color", request.color) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "color", parameterValue: request.color as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideBackgroundColorInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSlideBackgroundColor")
        var request = putSlidesSlideBackgroundColorRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "slideIndex", type: "Int"), color: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "color", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "folder", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideBackgroundColor", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideBackgroundColor", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideBackgroundColor(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideBackgroundColor", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputSlidesSlideSize() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        let request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        TestUtils.initialize("putSlidesSlideSize") { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidname() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidpassword() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidstorage() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidfolder() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidwidth() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.width = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "width", value: request.width as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "width", request.width) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "width", parameterValue: request.width as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidheight() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.height = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "height", value: request.height as Any, type: "Int")
        TestUtils.initialize("putSlidesSlideSize", "height", request.height) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "height", parameterValue: request.height as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidsizeType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.sizeType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "sizeType", value: request.sizeType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "sizeType", request.sizeType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "sizeType", parameterValue: request.sizeType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputSlidesSlideSizeInvalidscaleType() {
        let expectation = self.expectation(description: "testputSlidesSlideSize")
        var request = putSlidesSlideSizeRequest(name: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "name", type: "String"), password: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "password", type: "String"), storage: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "storage", type: "String"), folder: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "folder", type: "String"), width: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "width", type: "Int"), height: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "height", type: "Int"), sizeType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "sizeType", type: "String"), scaleType: TestUtils.getTestValue(functionName: "putSlidesSlideSize", name: "scaleType", type: "String"))
        request.scaleType = TestUtils.getInvalidTestValue(functionName: "putSlidesSlideSize", name: "scaleType", value: request.scaleType as Any, type: "String")
        TestUtils.initialize("putSlidesSlideSize", "scaleType", request.scaleType) { (response, error) -> Void in
            SlidesAPI.putSlidesSlideSize(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putSlidesSlideSize", parameterName: "scaleType", parameterValue: request.scaleType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputUpdateNotesSlide() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        let request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlide") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvalidname() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvalidslideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlide", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvaliddto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "dto", value: request.dto as Any, type: "NotesSlide")
        TestUtils.initialize("putUpdateNotesSlide", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvalidpassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvalidfolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideInvalidstorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlide")
        var request = putUpdateNotesSlideRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "slideIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "dto", type: "NotesSlide"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlide", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlide", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlide", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlide(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlide", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputUpdateNotesSlideShape() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        let request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidname() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidslideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidpath() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShape", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvaliddto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", value: request.dto as Any, type: "ShapeBase")
        TestUtils.initialize("putUpdateNotesSlideShape", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidpassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidfolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeInvalidstorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShape")
        var request = putUpdateNotesSlideShapeRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "shapeIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "dto", type: "ShapeBase"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShape", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShape", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShape(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShape", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputUpdateNotesSlideShapeParagraph() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        let request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidname() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidslideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidpath() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvaliddto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", value: request.dto as Any, type: "Paragraph")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidpassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidfolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapeParagraphInvalidstorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapeParagraph")
        var request = putUpdateNotesSlideShapeParagraphRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "paragraphIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "dto", type: "Paragraph"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapeParagraph", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapeParagraph", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapeParagraph(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapeParagraph", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testputUpdateNotesSlideShapePortion() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        let request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        TestUtils.initialize("putUpdateNotesSlideShapePortion") { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidname() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.name = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", value: request.name as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "name", request.name) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "name", parameterValue: request.name as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidslideIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.slideIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", value: request.slideIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "slideIndex", request.slideIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "slideIndex", parameterValue: request.slideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidpath() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "path", request.path) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidshapeIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.shapeIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", value: request.shapeIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "shapeIndex", request.shapeIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "shapeIndex", parameterValue: request.shapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidparagraphIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.paragraphIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", value: request.paragraphIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", request.paragraphIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "paragraphIndex", parameterValue: request.paragraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidportionIndex() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.portionIndex = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", value: request.portionIndex as Any, type: "Int")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "portionIndex", request.portionIndex) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "portionIndex", parameterValue: request.portionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvaliddto() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.dto = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", value: request.dto as Any, type: "Portion")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "dto", request.dto) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "dto", parameterValue: request.dto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidpassword() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.password = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", value: request.password as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "password", request.password) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "password", parameterValue: request.password as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidfolder() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.folder = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", value: request.folder as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "folder", request.folder) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "folder", parameterValue: request.folder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testputUpdateNotesSlideShapePortionInvalidstorage() {
        let expectation = self.expectation(description: "testputUpdateNotesSlideShapePortion")
        var request = putUpdateNotesSlideShapePortionRequest(name: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "name", type: "String"), slideIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "slideIndex", type: "Int"), path: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "path", type: "String"), shapeIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "shapeIndex", type: "Int"), paragraphIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "paragraphIndex", type: "Int"), portionIndex: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "portionIndex", type: "Int"), dto: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "dto", type: "Portion"), password: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "password", type: "String"), folder: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "folder", type: "String"), storage: TestUtils.getTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", type: "String"))
        request.storage = TestUtils.getInvalidTestValue(functionName: "putUpdateNotesSlideShapePortion", name: "storage", value: request.storage as Any, type: "String")
        TestUtils.initialize("putUpdateNotesSlideShapePortion", "storage", request.storage) { (response, error) -> Void in
            SlidesAPI.putUpdateNotesSlideShapePortion(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "putUpdateNotesSlideShapePortion", parameterName: "storage", parameterValue: request.storage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func teststorageExists() {
        let expectation = self.expectation(description: "teststorageExists")
        let request = storageExistsRequest(storageName: TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String"))
        TestUtils.initialize("storageExists") { (response, error) -> Void in
            SlidesAPI.storageExists(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func teststorageExistsInvalidstorageName() {
        let expectation = self.expectation(description: "teststorageExists")
        var request = storageExistsRequest(storageName: TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "storageExists", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("storageExists", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.storageExists(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "storageExists", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testuploadFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let request = uploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        TestUtils.initialize("uploadFile") { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testuploadFileInvalidpath() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = uploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.path = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "path", value: request.path as Any, type: "String")
        TestUtils.initialize("uploadFile", "path", request.path) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "path", parameterValue: request.path as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testuploadFileInvalidfile() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = uploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.file = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "file", value: request.file as Any, type: "Data")
        TestUtils.initialize("uploadFile", "file", request.file) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "file", parameterValue: request.file as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testuploadFileInvalidstorageName() {
        let expectation = self.expectation(description: "testuploadFile")
        var request = uploadFileRequest(path: TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String"), file: TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data"), storageName: TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String"))
        request.storageName = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "storageName", value: request.storageName as Any, type: "String")
        TestUtils.initialize("uploadFile", "storageName", request.storageName) { (response, error) -> Void in
            SlidesAPI.uploadFile(request: request) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "storageName", parameterValue: request.storageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
